0db05e0c1b3af380c3898a4ce598eb3b
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = exports.test = exports.serialize = void 0;

var _markup = require("./lib/markup");

var global = function () {
  if (typeof globalThis !== 'undefined') {
    return globalThis;
  } else if (typeof global !== 'undefined') {
    return global;
  } else if (typeof self !== 'undefined') {
    return self;
  } else if (typeof window !== 'undefined') {
    return window;
  } else {
    return Function('return this')();
  }
}();

var Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;
var testSymbol = typeof Symbol === 'function' && Symbol.for ? Symbol.for('react.test.json') : 0xea71357;

var getPropKeys = function getPropKeys(object) {
  var props = object.props;
  return props ? Object.keys(props).filter(function (key) {
    return props[key] !== undefined;
  }).sort() : [];
};

var serialize = function serialize(object, config, indentation, depth, refs, printer) {
  return ++depth > config.maxDepth ? (0, _markup.printElementAsLeaf)(object.type, config) : (0, _markup.printElement)(object.type, object.props ? (0, _markup.printProps)(getPropKeys(object), object.props, config, indentation + config.indent, depth, refs, printer) : '', object.children ? (0, _markup.printChildren)(object.children, config, indentation + config.indent, depth, refs, printer) : '', config, indentation);
};

exports.serialize = serialize;

var test = function test(val) {
  return val && val.$$typeof === testSymbol;
};

exports.test = test;
var plugin = {
  serialize: serialize,
  test: test
};
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlYWN0VGVzdENvbXBvbmVudC5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJ0ZXN0Iiwic2VyaWFsaXplIiwiX21hcmt1cCIsInJlcXVpcmUiLCJnbG9iYWwiLCJnbG9iYWxUaGlzIiwic2VsZiIsIndpbmRvdyIsIkZ1bmN0aW9uIiwiU3ltYm9sIiwidGVzdFN5bWJvbCIsImZvciIsImdldFByb3BLZXlzIiwib2JqZWN0IiwicHJvcHMiLCJrZXlzIiwiZmlsdGVyIiwia2V5IiwidW5kZWZpbmVkIiwic29ydCIsImNvbmZpZyIsImluZGVudGF0aW9uIiwiZGVwdGgiLCJyZWZzIiwicHJpbnRlciIsIm1heERlcHRoIiwicHJpbnRFbGVtZW50QXNMZWFmIiwidHlwZSIsInByaW50RWxlbWVudCIsInByaW50UHJvcHMiLCJpbmRlbnQiLCJjaGlsZHJlbiIsInByaW50Q2hpbGRyZW4iLCJ2YWwiLCIkJHR5cGVvZiIsInBsdWdpbiIsIl9kZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0UsT0FBUixHQUFrQkYsT0FBTyxDQUFDRyxJQUFSLEdBQWVILE9BQU8sQ0FBQ0ksU0FBUixHQUFvQixLQUFLLENBQTFEOztBQUVBLElBQUlDLE9BQU8sR0FBR0MsT0FBTyxnQkFBckI7O0FBRUEsSUFBSUMsTUFBTSxHQUFJLFlBQVk7QUFDeEIsTUFBSSxPQUFPQyxVQUFQLEtBQXNCLFdBQTFCLEVBQXVDO0FBQ3JDLFdBQU9BLFVBQVA7QUFDRCxHQUZELE1BRU8sSUFBSSxPQUFPRCxNQUFQLEtBQWtCLFdBQXRCLEVBQW1DO0FBQ3hDLFdBQU9BLE1BQVA7QUFDRCxHQUZNLE1BRUEsSUFBSSxPQUFPRSxJQUFQLEtBQWdCLFdBQXBCLEVBQWlDO0FBQ3RDLFdBQU9BLElBQVA7QUFDRCxHQUZNLE1BRUEsSUFBSSxPQUFPQyxNQUFQLEtBQWtCLFdBQXRCLEVBQW1DO0FBQ3hDLFdBQU9BLE1BQVA7QUFDRCxHQUZNLE1BRUE7QUFDTCxXQUFPQyxRQUFRLENBQUMsYUFBRCxDQUFSLEVBQVA7QUFDRDtBQUNGLENBWlksRUFBYjs7QUFjQSxJQUFJQyxNQUFNLEdBQUdMLE1BQU0sQ0FBQywwQkFBRCxDQUFOLElBQXNDQSxNQUFNLENBQUNLLE1BQTFEO0FBQ0EsSUFBTUMsVUFBVSxHQUNkLE9BQU9ELE1BQVAsS0FBa0IsVUFBbEIsSUFBZ0NBLE1BQU0sQ0FBQ0UsR0FBdkMsR0FDSUYsTUFBTSxDQUFDRSxHQUFQLENBQVcsaUJBQVgsQ0FESixHQUVJLFNBSE47O0FBS0EsSUFBTUMsV0FBVyxHQUFHLFNBQWRBLFdBQWMsQ0FBQUMsTUFBTSxFQUFJO0FBQzVCLE1BQU9DLEtBQVAsR0FBZ0JELE1BQWhCLENBQU9DLEtBQVA7QUFDQSxTQUFPQSxLQUFLLEdBQ1JuQixNQUFNLENBQUNvQixJQUFQLENBQVlELEtBQVosRUFDR0UsTUFESCxDQUNVLFVBQUFDLEdBQUc7QUFBQSxXQUFJSCxLQUFLLENBQUNHLEdBQUQsQ0FBTCxLQUFlQyxTQUFuQjtBQUFBLEdBRGIsRUFFR0MsSUFGSCxFQURRLEdBSVIsRUFKSjtBQUtELENBUEQ7O0FBU0EsSUFBTWxCLFNBQVMsR0FBRyxTQUFaQSxTQUFZLENBQUNZLE1BQUQsRUFBU08sTUFBVCxFQUFpQkMsV0FBakIsRUFBOEJDLEtBQTlCLEVBQXFDQyxJQUFyQyxFQUEyQ0MsT0FBM0M7QUFBQSxTQUNoQixFQUFFRixLQUFGLEdBQVVGLE1BQU0sQ0FBQ0ssUUFBakIsR0FDSSxDQUFDLEdBQUd2QixPQUFPLENBQUN3QixrQkFBWixFQUFnQ2IsTUFBTSxDQUFDYyxJQUF2QyxFQUE2Q1AsTUFBN0MsQ0FESixHQUVJLENBQUMsR0FBR2xCLE9BQU8sQ0FBQzBCLFlBQVosRUFDRWYsTUFBTSxDQUFDYyxJQURULEVBRUVkLE1BQU0sQ0FBQ0MsS0FBUCxHQUNJLENBQUMsR0FBR1osT0FBTyxDQUFDMkIsVUFBWixFQUNFakIsV0FBVyxDQUFDQyxNQUFELENBRGIsRUFFRUEsTUFBTSxDQUFDQyxLQUZULEVBR0VNLE1BSEYsRUFJRUMsV0FBVyxHQUFHRCxNQUFNLENBQUNVLE1BSnZCLEVBS0VSLEtBTEYsRUFNRUMsSUFORixFQU9FQyxPQVBGLENBREosR0FVSSxFQVpOLEVBYUVYLE1BQU0sQ0FBQ2tCLFFBQVAsR0FDSSxDQUFDLEdBQUc3QixPQUFPLENBQUM4QixhQUFaLEVBQ0VuQixNQUFNLENBQUNrQixRQURULEVBRUVYLE1BRkYsRUFHRUMsV0FBVyxHQUFHRCxNQUFNLENBQUNVLE1BSHZCLEVBSUVSLEtBSkYsRUFLRUMsSUFMRixFQU1FQyxPQU5GLENBREosR0FTSSxFQXRCTixFQXVCRUosTUF2QkYsRUF3QkVDLFdBeEJGLENBSFk7QUFBQSxDQUFsQjs7QUE4QkF4QixPQUFPLENBQUNJLFNBQVIsR0FBb0JBLFNBQXBCOztBQUVBLElBQU1ELElBQUksR0FBRyxTQUFQQSxJQUFPLENBQUFpQyxHQUFHO0FBQUEsU0FBSUEsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFFBQUosS0FBaUJ4QixVQUE1QjtBQUFBLENBQWhCOztBQUVBYixPQUFPLENBQUNHLElBQVIsR0FBZUEsSUFBZjtBQUNBLElBQU1tQyxNQUFNLEdBQUc7QUFDYmxDLEVBQUFBLFNBQVMsRUFBVEEsU0FEYTtBQUViRCxFQUFBQSxJQUFJLEVBQUpBO0FBRmEsQ0FBZjtBQUlBLElBQUlvQyxRQUFRLEdBQUdELE1BQWY7QUFDQXRDLE9BQU8sQ0FBQ0UsT0FBUixHQUFrQnFDLFFBQWxCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMudGVzdCA9IGV4cG9ydHMuc2VyaWFsaXplID0gdm9pZCAwO1xuXG52YXIgX21hcmt1cCA9IHJlcXVpcmUoJy4vbGliL21hcmt1cCcpO1xuXG52YXIgZ2xvYmFsID0gKGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBnbG9iYWxUaGlzO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGdsb2JhbDtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gc2VsZjtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiB3aW5kb3c7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4gIH1cbn0pKCk7XG5cbnZhciBTeW1ib2wgPSBnbG9iYWxbJ2plc3Qtc3ltYm9sLWRvLW5vdC10b3VjaCddIHx8IGdsb2JhbC5TeW1ib2w7XG5jb25zdCB0ZXN0U3ltYm9sID1cbiAgdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yXG4gICAgPyBTeW1ib2wuZm9yKCdyZWFjdC50ZXN0Lmpzb24nKVxuICAgIDogMHhlYTcxMzU3O1xuXG5jb25zdCBnZXRQcm9wS2V5cyA9IG9iamVjdCA9PiB7XG4gIGNvbnN0IHtwcm9wc30gPSBvYmplY3Q7XG4gIHJldHVybiBwcm9wc1xuICAgID8gT2JqZWN0LmtleXMocHJvcHMpXG4gICAgICAgIC5maWx0ZXIoa2V5ID0+IHByb3BzW2tleV0gIT09IHVuZGVmaW5lZClcbiAgICAgICAgLnNvcnQoKVxuICAgIDogW107XG59O1xuXG5jb25zdCBzZXJpYWxpemUgPSAob2JqZWN0LCBjb25maWcsIGluZGVudGF0aW9uLCBkZXB0aCwgcmVmcywgcHJpbnRlcikgPT5cbiAgKytkZXB0aCA+IGNvbmZpZy5tYXhEZXB0aFxuICAgID8gKDAsIF9tYXJrdXAucHJpbnRFbGVtZW50QXNMZWFmKShvYmplY3QudHlwZSwgY29uZmlnKVxuICAgIDogKDAsIF9tYXJrdXAucHJpbnRFbGVtZW50KShcbiAgICAgICAgb2JqZWN0LnR5cGUsXG4gICAgICAgIG9iamVjdC5wcm9wc1xuICAgICAgICAgID8gKDAsIF9tYXJrdXAucHJpbnRQcm9wcykoXG4gICAgICAgICAgICAgIGdldFByb3BLZXlzKG9iamVjdCksXG4gICAgICAgICAgICAgIG9iamVjdC5wcm9wcyxcbiAgICAgICAgICAgICAgY29uZmlnLFxuICAgICAgICAgICAgICBpbmRlbnRhdGlvbiArIGNvbmZpZy5pbmRlbnQsXG4gICAgICAgICAgICAgIGRlcHRoLFxuICAgICAgICAgICAgICByZWZzLFxuICAgICAgICAgICAgICBwcmludGVyXG4gICAgICAgICAgICApXG4gICAgICAgICAgOiAnJyxcbiAgICAgICAgb2JqZWN0LmNoaWxkcmVuXG4gICAgICAgICAgPyAoMCwgX21hcmt1cC5wcmludENoaWxkcmVuKShcbiAgICAgICAgICAgICAgb2JqZWN0LmNoaWxkcmVuLFxuICAgICAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgICAgIGluZGVudGF0aW9uICsgY29uZmlnLmluZGVudCxcbiAgICAgICAgICAgICAgZGVwdGgsXG4gICAgICAgICAgICAgIHJlZnMsXG4gICAgICAgICAgICAgIHByaW50ZXJcbiAgICAgICAgICAgIClcbiAgICAgICAgICA6ICcnLFxuICAgICAgICBjb25maWcsXG4gICAgICAgIGluZGVudGF0aW9uXG4gICAgICApO1xuXG5leHBvcnRzLnNlcmlhbGl6ZSA9IHNlcmlhbGl6ZTtcblxuY29uc3QgdGVzdCA9IHZhbCA9PiB2YWwgJiYgdmFsLiQkdHlwZW9mID09PSB0ZXN0U3ltYm9sO1xuXG5leHBvcnRzLnRlc3QgPSB0ZXN0O1xuY29uc3QgcGx1Z2luID0ge1xuICBzZXJpYWxpemUsXG4gIHRlc3Rcbn07XG52YXIgX2RlZmF1bHQgPSBwbHVnaW47XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbiJdfQ==