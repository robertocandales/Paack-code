fac76b4191ffb1dad8f25d3db8619aae
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shallowInternal = shallowInternal;
exports.default = shallow;

var React = _interopRequireWildcard(require("react"));

var _shallow = _interopRequireDefault(require("react-test-renderer/shallow"));

var _errors = require("./helpers/errors");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function shallowInternal(instance) {
  var renderer = new _shallow.default();
  renderer.render(React.createElement(instance.type, instance.props));
  return {
    output: renderer.getRenderOutput()
  };
}

function shallow(_) {
  (0, _errors.throwRemovedFunctionError)('shallow', 'migration-v2#removed-global-shallow-function');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNoYWxsb3cuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzaGFsbG93SW50ZXJuYWwiLCJkZWZhdWx0Iiwic2hhbGxvdyIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX3NoYWxsb3ciLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2Vycm9ycyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJXZWFrTWFwIiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiaW5zdGFuY2UiLCJyZW5kZXJlciIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJ0eXBlIiwicHJvcHMiLCJvdXRwdXQiLCJnZXRSZW5kZXJPdXRwdXQiLCJfIiwidGhyb3dSZW1vdmVkRnVuY3Rpb25FcnJvciJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLGVBQVIsR0FBMEJBLGVBQTFCO0FBQ0FGLE9BQU8sQ0FBQ0csT0FBUixHQUFrQkMsT0FBbEI7O0FBRUEsSUFBSUMsS0FBSyxHQUFHQyx1QkFBdUIsQ0FBQ0MsT0FBTyxDQUFDLE9BQUQsQ0FBUixDQUFuQzs7QUFFQSxJQUFJQyxRQUFRLEdBQUdDLHNCQUFzQixDQUFDRixPQUFPLENBQUMsNkJBQUQsQ0FBUixDQUFyQzs7QUFFQSxJQUFJRyxPQUFPLEdBQUdILE9BQU8sb0JBQXJCOztBQUVBLFNBQVNFLHNCQUFULENBQWdDRSxHQUFoQyxF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dC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnNoYWxsb3dJbnRlcm5hbCA9IHNoYWxsb3dJbnRlcm5hbDtcbmV4cG9ydHMuZGVmYXVsdCA9IHNoYWxsb3c7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfc2hhbGxvdyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LXRlc3QtcmVuZGVyZXIvc2hhbGxvd1wiKSk7XG5cbnZhciBfZXJyb3JzID0gcmVxdWlyZShcIi4vaGVscGVycy9lcnJvcnNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1saW5lIGltcG9ydC9uby1leHRyYW5lb3VzLWRlcGVuZGVuY2llc1xuXG4vKipcbiAqIFJlbmRlcnMgdGVzdCBjb21wb25lbnQgc2hhbGxvd2x5IHVzaW5nIHJlYWN0LXRlc3QtcmVuZGVyZXIvc2hhbGxvd1xuICovXG5mdW5jdGlvbiBzaGFsbG93SW50ZXJuYWwoaW5zdGFuY2UpIHtcbiAgY29uc3QgcmVuZGVyZXIgPSBuZXcgX3NoYWxsb3cuZGVmYXVsdCgpO1xuICByZW5kZXJlci5yZW5kZXIoIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KGluc3RhbmNlLnR5cGUsIGluc3RhbmNlLnByb3BzKSk7XG4gIHJldHVybiB7XG4gICAgb3V0cHV0OiByZW5kZXJlci5nZXRSZW5kZXJPdXRwdXQoKVxuICB9O1xufVxuXG5mdW5jdGlvbiBzaGFsbG93KF8pIHtcbiAgKDAsIF9lcnJvcnMudGhyb3dSZW1vdmVkRnVuY3Rpb25FcnJvcikoJ3NoYWxsb3cnLCAnbWlncmF0aW9uLXYyI3JlbW92ZWQtZ2xvYmFsLXNoYWxsb3ctZnVuY3Rpb24nKTtcbn0iXX0=