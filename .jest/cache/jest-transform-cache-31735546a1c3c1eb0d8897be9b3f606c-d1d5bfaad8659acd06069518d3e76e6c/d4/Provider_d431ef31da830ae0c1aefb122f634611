8efb7dd550cf1e62b5440ecc54b75103
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard")["default"];

exports.__esModule = true;
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Context = require("./Context");

var _Subscription = require("../utils/Subscription");

var _useIsomorphicLayoutEffect = require("../utils/useIsomorphicLayoutEffect");

function Provider(_ref) {
  var store = _ref.store,
      context = _ref.context,
      children = _ref.children;
  var contextValue = (0, _react.useMemo)(function () {
    var subscription = (0, _Subscription.createSubscription)(store);
    subscription.onStateChange = subscription.notifyNestedSubs;
    return {
      store: store,
      subscription: subscription
    };
  }, [store]);
  var previousState = (0, _react.useMemo)(function () {
    return store.getState();
  }, [store]);
  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    var subscription = contextValue.subscription;
    subscription.trySubscribe();

    if (previousState !== store.getState()) {
      subscription.notifyNestedSubs();
    }

    return function () {
      subscription.tryUnsubscribe();
      subscription.onStateChange = null;
    };
  }, [contextValue, previousState]);
  var Context = context || _Context.ReactReduxContext;
  return _react["default"].createElement(Context.Provider, {
    value: contextValue
  }, children);
}

if (process.env.NODE_ENV !== 'production') {
  Provider.propTypes = {
    store: _propTypes["default"].shape({
      subscribe: _propTypes["default"].func.isRequired,
      dispatch: _propTypes["default"].func.isRequired,
      getState: _propTypes["default"].func.isRequired
    }),
    context: _propTypes["default"].object,
    children: _propTypes["default"].any
  };
}

var _default = Provider;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlByb3ZpZGVyLmpzIl0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJleHBvcnRzIiwiX19lc01vZHVsZSIsIl9yZWFjdCIsIl9wcm9wVHlwZXMiLCJfQ29udGV4dCIsIl9TdWJzY3JpcHRpb24iLCJfdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsIlByb3ZpZGVyIiwiX3JlZiIsInN0b3JlIiwiY29udGV4dCIsImNoaWxkcmVuIiwiY29udGV4dFZhbHVlIiwidXNlTWVtbyIsInN1YnNjcmlwdGlvbiIsImNyZWF0ZVN1YnNjcmlwdGlvbiIsIm9uU3RhdGVDaGFuZ2UiLCJub3RpZnlOZXN0ZWRTdWJzIiwicHJldmlvdXNTdGF0ZSIsImdldFN0YXRlIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsInRyeVN1YnNjcmliZSIsInRyeVVuc3Vic2NyaWJlIiwiQ29udGV4dCIsIlJlYWN0UmVkdXhDb250ZXh0IiwiY3JlYXRlRWxlbWVudCIsInZhbHVlIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwicHJvcFR5cGVzIiwic2hhcGUiLCJzdWJzY3JpYmUiLCJmdW5jIiwiaXNSZXF1aXJlZCIsImRpc3BhdGNoIiwib2JqZWN0IiwiYW55IiwiX2RlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLHNCQUFzQixHQUFHQyxPQUFPLENBQUMsOENBQUQsQ0FBUCxDQUF3RCxTQUF4RCxDQUE3Qjs7QUFFQSxJQUFJQyx1QkFBdUIsR0FBR0QsT0FBTyxDQUFDLCtDQUFELENBQVAsQ0FBeUQsU0FBekQsQ0FBOUI7O0FBRUFFLE9BQU8sQ0FBQ0MsVUFBUixHQUFxQixJQUFyQjtBQUNBRCxPQUFPLENBQUMsU0FBRCxDQUFQLEdBQXFCLEtBQUssQ0FBMUI7O0FBRUEsSUFBSUUsTUFBTSxHQUFHSCx1QkFBdUIsQ0FBQ0QsT0FBTyxDQUFDLE9BQUQsQ0FBUixDQUFwQzs7QUFF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LEdBQUcvQixRQUFmO0FBQ0FQLE9BQU8sQ0FBQyxTQUFELENBQVAsR0FBcUJzQyxRQUFyQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKVtcImRlZmF1bHRcIl07XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIilbXCJkZWZhdWx0XCJdO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX0NvbnRleHQgPSByZXF1aXJlKFwiLi9Db250ZXh0XCIpO1xuXG52YXIgX1N1YnNjcmlwdGlvbiA9IHJlcXVpcmUoXCIuLi91dGlscy9TdWJzY3JpcHRpb25cIik7XG5cbnZhciBfdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IHJlcXVpcmUoXCIuLi91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0XCIpO1xuXG5mdW5jdGlvbiBQcm92aWRlcihfcmVmKSB7XG4gIHZhciBzdG9yZSA9IF9yZWYuc3RvcmUsXG4gICAgICBjb250ZXh0ID0gX3JlZi5jb250ZXh0LFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuICB2YXIgY29udGV4dFZhbHVlID0gKDAsIF9yZWFjdC51c2VNZW1vKShmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9ICgwLCBfU3Vic2NyaXB0aW9uLmNyZWF0ZVN1YnNjcmlwdGlvbikoc3RvcmUpO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnM7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0b3JlOiBzdG9yZSxcbiAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgfTtcbiAgfSwgW3N0b3JlXSk7XG4gIHZhciBwcmV2aW91c1N0YXRlID0gKDAsIF9yZWFjdC51c2VNZW1vKShmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHN0b3JlLmdldFN0YXRlKCk7XG4gIH0sIFtzdG9yZV0pO1xuICAoMCwgX3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QudXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCkoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjb250ZXh0VmFsdWUuc3Vic2NyaXB0aW9uO1xuICAgIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcblxuICAgIGlmIChwcmV2aW91c1N0YXRlICE9PSBzdG9yZS5nZXRTdGF0ZSgpKSB7XG4gICAgICBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicygpO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gbnVsbDtcbiAgICB9O1xuICB9LCBbY29udGV4dFZhbHVlLCBwcmV2aW91c1N0YXRlXSk7XG4gIHZhciBDb250ZXh0ID0gY29udGV4dCB8fCBfQ29udGV4dC5SZWFjdFJlZHV4Q29udGV4dDtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0VmFsdWVcbiAgfSwgY2hpbGRyZW4pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBQcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gICAgc3RvcmU6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnNoYXBlKHtcbiAgICAgIHN1YnNjcmliZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgZGlzcGF0Y2g6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGdldFN0YXRlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KSxcbiAgICBjb250ZXh0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vYmplY3QsXG4gICAgY2hpbGRyZW46IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmFueVxuICB9O1xufVxuXG52YXIgX2RlZmF1bHQgPSBQcm92aWRlcjtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7Il19