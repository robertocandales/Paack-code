{"version":3,"sources":["index.js"],"names":["Object","defineProperty","exports","value","_pure","require","keys","forEach","key","enumerable","get","_flushMicroTasks","afterEach","process","env","RNTL_SKIP_AUTO_CLEANUP","flushMicroTasks","cleanup"],"mappings":"AAAA;;;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;;AAIA,IAAIC,KAAK,GAAGC,OAAO,UAAnB;;AAEAL,MAAM,CAACM,IAAP,CAAYF,KAAZ,EAAmBG,OAAnB,CAA2B,UAAUC,GAAV,EAAe;AACxC,MAAIA,GAAG,KAAK,SAAR,IAAqBA,GAAG,KAAK,YAAjC,EAA+C;AAC/C,MAAIA,GAAG,IAAIN,OAAP,IAAkBA,OAAO,CAACM,GAAD,CAAP,KAAiBJ,KAAK,CAACI,GAAD,CAA5C,EAAmD;AACnDR,EAAAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+BM,GAA/B,EAAoC;AAClCC,IAAAA,UAAU,EAAE,IADsB;AAElCC,IAAAA,GAAG,EAAE,eAAY;AACf,aAAON,KAAK,CAACI,GAAD,CAAZ;AACD;AAJiC,GAApC;AAMD,CATD;;AAWA,IAAIG,gBAAgB,GAAGN,OAAO,qBAA9B;;AAOA,IAAI,OAAOO,SAAP,KAAqB,UAArB,IAAmC,CAACC,OAAO,CAACC,GAAR,CAAYC,sBAApD,EAA4E;AAE1EH,EAAAA,SAAS,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CACF,CAAC,GAAGD,gBAAgB,CAACK,eAArB,GADE;;AAAA;AAER,aAAC,GAAGZ,KAAK,CAACa,OAAV;;AAFQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,CAAT;AAID","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _pure = require(\"./pure\");\n\nObject.keys(_pure).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _pure[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _pure[key];\n    }\n  });\n});\n\nvar _flushMicroTasks = require(\"./flushMicroTasks\");\n\n// If we're running in a test runner that supports afterEach\n// then we'll automatically run cleanup afterEach test\n// this ensures that tests run in isolation from each other\n// if you don't like this then either import the `pure` module\n// or set the RNTL_SKIP_AUTO_CLEANUP env variable to 'true'.\nif (typeof afterEach === 'function' && !process.env.RNTL_SKIP_AUTO_CLEANUP) {\n  // eslint-disable-next-line no-undef\n  afterEach(async () => {\n    await (0, _flushMicroTasks.flushMicroTasks)();\n    (0, _pure.cleanup)();\n  });\n}"]}