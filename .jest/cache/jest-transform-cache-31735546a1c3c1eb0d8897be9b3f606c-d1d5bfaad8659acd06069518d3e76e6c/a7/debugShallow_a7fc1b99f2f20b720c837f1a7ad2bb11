d8ff8479e16355ecd0bacc7a02453dca
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = debugShallow;

var React = _interopRequireWildcard(require("react"));

var _shallow = require("../shallow");

var _format = _interopRequireDefault(require("./format"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function debugShallow(instance, message) {
  var _ref = (0, _shallow.shallowInternal)(instance),
      output = _ref.output;

  if (message) {
    console.log(message + "\n\n", (0, _format.default)(output));
  } else {
    console.log((0, _format.default)(output));
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlYnVnU2hhbGxvdy5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJkZWJ1Z1NoYWxsb3ciLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9zaGFsbG93IiwiX2Zvcm1hdCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfX2VzTW9kdWxlIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiV2Vha01hcCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsImluc3RhbmNlIiwibWVzc2FnZSIsInNoYWxsb3dJbnRlcm5hbCIsIm91dHB1dCIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxFQUFBQSxLQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUQsT0FBTyxDQUFDRSxPQUFSLEdBQWtCQyxZQUFsQjs7QUFFQSxJQUFJQyxLQUFLLEdBQUdDLHVCQUF1QixDQUFDQyxPQUFPLENBQUMsT0FBRCxDQUFSLENBQW5DOztBQUVBLElBQUlDLFFBQVEsR0FBR0QsT0FBTyxjQUF0Qjs7QUFFQSxJQUFJRSxPQUFPLEdBQUdDLHNCQUFzQixDQUFDSCxPQUFPLFlBQVIsQ0FBcEM7O0FBRUEsU0FBU0csc0JBQVQsQ0FBZ0NDLEdBQWhDLEVBQXFDO0FBQUUsU0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCO0FBQUVSLElBQUFBLE9BQU8sRUFBRVE7QUFBWCxHQUFyQztBQUF3RDs7QUFFL0YsU0FBU0Usd0JBQVQsR0FBb0M7QUFBRSxNQUFJLE9BQU9DLE9BQVAsS0FBbUIsVUFBdkIsRUFBbUMsT0FBTyxJQUFQO0FBQWEsTUFBSUMsS0FBSyxHQUFHLElBQUlELE9BQUosRUFBWjs7QUFBMkJELEVBQUFBLHdCQUF3QixHQUFHLG9DQUFZO0FBQUUsV0FBT0UsS0FBUDtBQUFlLEdBQXhEOztBQUEwRCxTQUFPQSxLQUFQO0FBQWU7O0FBRTFMLFNBQVNULHVCQUFULENBQWlDSyxHQUFqQyxFQUFzQztBQUFFLE1BQUlBLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFmLEVBQTJCO0FBQUUsV0FBT0QsR0FBUDtBQUFhOztBQUFDLE1BQUlBLEdBQUcsS0FBSyxJQUFSLElBQWdCLE9BQU9BLEdBQVAsS0FBZSxRQUFmLElBQTJCLE9BQU9BLEdBQVAsS0FBZSxVQUE5RCxFQUEwRTtBQUFFLFdBQU87QUFBRVIsTUFBQUEsT0FBTyxFQUFFUTtBQUFYLEtBQVA7QUFBMEI7O0FBQUMsTUFBSUksS0FBSyxHQUFHRix3QkFBd0IsRUFBcEM7O0FBQXdDLE1BQUlFLEtBQUssSUFBSUEsS0FBSyxDQUFDQyxHQUFOLENBQVVMLEdBQVYsQ0FBYixFQUE2QjtBQUFFLFdBQU9JLEtBQUssQ0FBQ0UsR0FBTixDQUFVTixHQUFWLENBQVA7QUFBd0I7O0FBQUMsTUFBSU8sTUFBTSxHQUFHLEVBQWI7QUFBaUIsTUFBSUMscUJBQXFCLEdBQUdwQixNQUFNLENBQUNDLGNBQVAsSUFBeUJELE1BQU0sQ0FBQ3FCLHdCQUE1RDs7QUFBc0YsT0FBSyxJQUFJQyxHQUFULElBQWdCVixHQUFoQixFQUFxQjtBQUFFLFFBQUlaLE1BQU0sQ0FBQ3VCLFNBQVAsQ0FBaUJDLGNBQWpCLENBQWdDQyxJQUFoQyxDQUFxQ2IsR0FBckMsRUFBMENVLEdBQTFDLENBQUosRUFBb0Q7QUFBRSxVQUFJSSxJQUFJLEdBQUdOLHFCQUFxQixHQUFHcEIsTUFBTSxDQUFDcUIsd0JBQVAsQ0FBZ0NULEdBQWhDLEVBQXFDVSxHQUFyQyxDQUFILEdBQStDLElBQS9FOztBQUFxRixVQUFJSSxJQUFJLEtBQUtBLElBQUksQ0FBQ1IsR0FBTCxJQUFZUSxJQUFJLENBQUNDLEdBQXRCLENBQVIsRUFBb0M7QUFBRTNCLFFBQUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQmtCLE1BQXRCLEVBQThCRyxHQUE5QixFQUFtQ0ksSUFBbkM7QUFBMkMsT0FBakYsTUFBdUY7QUFBRVAsUUFBQUEsTUFBTSxDQUFDRyxHQUFELENBQU4sR0FBY1YsR0FBRyxDQUFDVSxHQUFELENBQWpCO0FBQXlCO0FBQUU7QUFBRTs7QUFBQ0gsRUFBQUEsTUFBTSxDQUFDZixPQUFQLEdBQWlCUSxHQUFqQjs7QUFBc0IsTUFBSUksS0FBSixFQUFXO0FBQUVBLElBQUFBLEtBQUssQ0FBQ1csR0FBTixDQUFVZixHQUFWLEVBQWVPLE1BQWY7QUFBeUI7O0FBQUMsU0FBT0EsTUFBUDtBQUFnQjs7QUFLdnVCLFNBQVNkLFlBQVQsQ0FBc0J1QixRQUF0QixFQUFnQ0MsT0FBaEMsRUFBeUM7QUFDdkMsYUFFSSxDQUFDLEdBQUdwQixRQUFRLENBQUNxQixlQUFiLEVBQThCRixRQUE5QixDQUZKO0FBQUEsTUFDRUcsTUFERixRQUNFQSxNQURGOztBQUlBLE1BQUlGLE9BQUosRUFBYTtBQUNYRyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBZUosT0FBZixXQUE4QixDQUFDLEdBQUduQixPQUFPLENBQUNOLE9BQVosRUFBcUIyQixNQUFyQixDQUE5QjtBQUNELEdBRkQsTUFFTztBQUNMQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxDQUFDLEdBQUd2QixPQUFPLENBQUNOLE9BQVosRUFBcUIyQixNQUFyQixDQUFaO0FBQ0Q7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVidWdTaGFsbG93O1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3NoYWxsb3cgPSByZXF1aXJlKFwiLi4vc2hhbGxvd1wiKTtcblxudmFyIF9mb3JtYXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2Zvcm1hdFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG4vKipcbiAqIExvZyBwcmV0dHktcHJpbnRlZCBzaGFsbG93IHRlc3QgY29tcG9uZW50IGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGRlYnVnU2hhbGxvdyhpbnN0YW5jZSwgbWVzc2FnZSkge1xuICBjb25zdCB7XG4gICAgb3V0cHV0XG4gIH0gPSAoMCwgX3NoYWxsb3cuc2hhbGxvd0ludGVybmFsKShpbnN0YW5jZSk7XG5cbiAgaWYgKG1lc3NhZ2UpIHtcbiAgICBjb25zb2xlLmxvZyhgJHttZXNzYWdlfVxcblxcbmAsICgwLCBfZm9ybWF0LmRlZmF1bHQpKG91dHB1dCkpO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUubG9nKCgwLCBfZm9ybWF0LmRlZmF1bHQpKG91dHB1dCkpO1xuICB9XG59Il19