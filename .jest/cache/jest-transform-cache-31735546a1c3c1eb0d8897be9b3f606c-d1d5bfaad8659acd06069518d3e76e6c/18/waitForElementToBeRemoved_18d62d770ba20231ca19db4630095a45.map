{"version":3,"sources":["waitForElementToBeRemoved.js"],"names":["Object","defineProperty","exports","value","default","waitForElementToBeRemoved","_waitFor","_interopRequireDefault","require","_errors","obj","__esModule","isRemoved","result","Array","isArray","length","expectation","options","timeoutError","ErrorWithStack","initialElements","error"],"mappings":"AAAA;;;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,yBAAlB;;AAEA,IAAIC,QAAQ,GAAGC,sBAAsB,CAACC,OAAO,aAAR,CAArC;;AAEA,IAAIC,OAAO,GAAGD,OAAO,oBAArB;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEN,IAAAA,OAAO,EAAEM;AAAX,GAArC;AAAwD;;AAE/F,SAASE,SAAT,CAAmBC,MAAnB,EAA2B;AACzB,SAAO,CAACA,MAAD,IAAWC,KAAK,CAACC,OAAN,CAAcF,MAAd,KAAyB,CAACA,MAAM,CAACG,MAAnD;AACD;;AAED,SAAeX,yBAAf,CAAyCY,WAAzC,EAAsDC,OAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQC,UAAAA,YAFR,GAEuB,IAAIV,OAAO,CAACW,cAAZ,CAA2B,yCAA3B,EAAsEf,yBAAtE,CAFvB;AAIQgB,UAAAA,eAJR,GAI0BJ,WAAW,EAJrC;;AAAA,eAMML,SAAS,CAACS,eAAD,CANf;AAAA;AAAA;AAAA;;AAAA,gBAOU,IAAIZ,OAAO,CAACW,cAAZ,CAA2B,oKAA3B,EAAiMf,yBAAjM,CAPV;;AAAA;AAAA,2CAUS,CAAC,GAAGC,QAAQ,CAACF,OAAb,EAAsB,YAAM;AACjC,gBAAIS,MAAJ;;AAEA,gBAAI;AACFA,cAAAA,MAAM,GAAGI,WAAW,EAApB;AACD,aAFD,CAEE,OAAOK,KAAP,EAAc;AACd,qBAAOD,eAAP;AACD;;AAED,gBAAI,CAACT,SAAS,CAACC,MAAD,CAAd,EAAwB;AACtB,oBAAMM,YAAN;AACD;;AAED,mBAAOE,eAAP;AACD,WAdM,EAcJH,OAdI,CAVT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = waitForElementToBeRemoved;\n\nvar _waitFor = _interopRequireDefault(require(\"./waitFor\"));\n\nvar _errors = require(\"./helpers/errors\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isRemoved(result) {\n  return !result || Array.isArray(result) && !result.length;\n}\n\nasync function waitForElementToBeRemoved(expectation, options) {\n  // Created here so we get a nice stacktrace\n  const timeoutError = new _errors.ErrorWithStack('Timed out in waitForElementToBeRemoved.', waitForElementToBeRemoved); // Elements have to be present initally and then removed.\n\n  const initialElements = expectation();\n\n  if (isRemoved(initialElements)) {\n    throw new _errors.ErrorWithStack('The element(s) given to waitForElementToBeRemoved are already removed. waitForElementToBeRemoved requires that the element(s) exist(s) before waiting for removal.', waitForElementToBeRemoved);\n  }\n\n  return (0, _waitFor.default)(() => {\n    let result;\n\n    try {\n      result = expectation();\n    } catch (error) {\n      return initialElements;\n    }\n\n    if (!isRemoved(result)) {\n      throw timeoutError;\n    }\n\n    return initialElements;\n  }, options);\n}"]}