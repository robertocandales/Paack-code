2da531cc77498c9975cd58c214c57871
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault2(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = waitFor;
exports.waitForElement = waitForElement;

var React = _interopRequireWildcard(require("react"));

var _act = _interopRequireDefault(require("./act"));

var _errors = require("./helpers/errors");

var _timers = require("./helpers/timers");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var DEFAULT_TIMEOUT = 1000;
var DEFAULT_INTERVAL = 50;

function checkReactVersionAtLeast(major, minor) {
  if (React.version === undefined) return false;

  var _React$version$split$ = React.version.split('.').map(Number),
      _React$version$split$2 = (0, _slicedToArray2.default)(_React$version$split$, 2),
      actualMajor = _React$version$split$2[0],
      actualMinor = _React$version$split$2[1];

  return actualMajor > major || actualMajor === major && actualMinor >= minor;
}

function waitForInternal(expectation, _ref) {
  var _ref$timeout = _ref.timeout,
      timeout = _ref$timeout === void 0 ? DEFAULT_TIMEOUT : _ref$timeout,
      _ref$interval = _ref.interval,
      interval = _ref$interval === void 0 ? DEFAULT_INTERVAL : _ref$interval,
      stackTraceError = _ref.stackTraceError;

  if (typeof expectation !== 'function') {
    throw new TypeError('Received `expectation` arg must be a function');
  }

  return new Promise(function _callee(resolve, reject) {
    var lastError, intervalId, finished, promiseStatus, overallTimeoutTimer, usingFakeTimers, fakeTimeRemaining, error, onDone, checkRealTimersCallback, checkExpectation, handleTimeout;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            handleTimeout = function _handleTimeout() {
              var error;

              if (lastError) {
                error = lastError;

                if (stackTraceError) {
                  (0, _errors.copyStackTrace)(error, stackTraceError);
                }
              } else {
                error = new Error('Timed out in waitFor.');

                if (stackTraceError) {
                  (0, _errors.copyStackTrace)(error, stackTraceError);
                }
              }

              onDone(error, null);
            };

            checkExpectation = function _checkExpectation() {
              if (promiseStatus === 'pending') return;

              try {
                var result = expectation();

                if (typeof (result === null || result === void 0 ? void 0 : result.then) === 'function') {
                  promiseStatus = 'pending';
                  result.then(function (resolvedValue) {
                    promiseStatus = 'resolved';
                    onDone(null, resolvedValue);
                    return;
                  }, function (rejectedValue) {
                    promiseStatus = 'rejected';
                    lastError = rejectedValue;
                    return;
                  });
                } else {
                  onDone(null, result);
                }
              } catch (error) {
                lastError = error;
              }
            };

            checkRealTimersCallback = function _checkRealTimersCallb() {
              if ((0, _timers.jestFakeTimersAreEnabled)()) {
                var _error = new Error("Changed from using real timers to fake timers while using waitFor. This is not allowed and will result in very strange behavior. Please ensure you're awaiting all async things your test is doing before changing to fake timers. For more info, please go to https://github.com/testing-library/dom-testing-library/issues/830");

                if (stackTraceError) {
                  (0, _errors.copyStackTrace)(_error, stackTraceError);
                }

                return reject(_error);
              } else {
                return checkExpectation();
              }
            };

            onDone = function _onDone(error, result) {
              finished = true;
              (0, _timers.clearTimeout)(overallTimeoutTimer);

              if (!usingFakeTimers) {
                clearInterval(intervalId);
              }

              if (error) {
                reject(error);
              } else {
                resolve(result);
              }
            };

            finished = false;
            promiseStatus = 'idle';
            overallTimeoutTimer = (0, _timers.setTimeout)(handleTimeout, timeout);
            usingFakeTimers = (0, _timers.jestFakeTimersAreEnabled)();

            if (!usingFakeTimers) {
              _context.next = 30;
              break;
            }

            checkExpectation();
            fakeTimeRemaining = timeout;

          case 11:
            if (finished) {
              _context.next = 28;
              break;
            }

            if ((0, _timers.jestFakeTimersAreEnabled)()) {
              _context.next = 17;
              break;
            }

            error = new Error("Changed from using fake timers to real timers while using waitFor. This is not allowed and will result in very strange behavior. Please ensure you're awaiting all async things your test is doing before changing to real timers. For more info, please go to https://github.com/testing-library/dom-testing-library/issues/830");

            if (stackTraceError) {
              (0, _errors.copyStackTrace)(error, stackTraceError);
            }

            reject(error);
            return _context.abrupt("return");

          case 17:
            if (!(fakeTimeRemaining <= 0)) {
              _context.next = 21;
              break;
            }

            return _context.abrupt("return");

          case 21:
            fakeTimeRemaining -= interval;

          case 22:
            jest.advanceTimersByTime(interval);
            checkExpectation();
            _context.next = 26;
            return _regenerator.default.awrap(new Promise(function (resolve) {
              return (0, _timers.setImmediate)(resolve);
            }));

          case 26:
            _context.next = 11;
            break;

          case 28:
            _context.next = 32;
            break;

          case 30:
            intervalId = setInterval(checkRealTimersCallback, interval);
            checkExpectation();

          case 32:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, null, Promise);
  });
}

function waitFor(expectation, options) {
  var stackTraceError, optionsWithStackTrace, result;
  return _regenerator.default.async(function waitFor$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          stackTraceError = new _errors.ErrorWithStack('STACK_TRACE_ERROR', waitFor);
          optionsWithStackTrace = _objectSpread({
            stackTraceError: stackTraceError
          }, options);

          if (checkReactVersionAtLeast(16, 9)) {
            _context3.next = 4;
            break;
          }

          return _context3.abrupt("return", waitForInternal(expectation, optionsWithStackTrace));

        case 4:
          _context3.next = 6;
          return _regenerator.default.awrap((0, _act.default)(function _callee2() {
            return _regenerator.default.async(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return _regenerator.default.awrap(waitForInternal(expectation, optionsWithStackTrace));

                  case 2:
                    result = _context2.sent;

                  case 3:
                  case "end":
                    return _context2.stop();
                }
              }
            }, null, null, null, Promise);
          }));

        case 6:
          return _context3.abrupt("return", result);

        case 7:
        case "end":
          return _context3.stop();
      }
    }
  }, null, null, null, Promise);
}

function waitForElement(expectation) {
  var _timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4500;

  var _interval = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;

  (0, _errors.throwRemovedFunctionError)('waitForElement', 'migration-v2#waitfor-api-changes');
  return Promise.reject();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,