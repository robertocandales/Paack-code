15bb17b49c97d335f5bd3f79f497eeb2
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runWithRealTimers = runWithRealTimers;
exports.setTimeout = exports.setImmediate = exports.clearTimeout = exports.jestFakeTimersAreEnabled = void 0;
var globalObj = typeof window === 'undefined' ? global : window;

function runWithRealTimers(callback) {
  var fakeTimersType = getJestFakeTimersType();

  if (fakeTimersType) {
    jest.useRealTimers();
  }

  var callbackReturnValue = callback();

  if (fakeTimersType) {
    jest.useFakeTimers(fakeTimersType);
  }

  return callbackReturnValue;
}

function getJestFakeTimersType() {
  if (typeof jest === 'undefined' || typeof globalObj.setTimeout === 'undefined') {
    return null;
  }

  if (typeof globalObj.setTimeout._isMockFunction !== 'undefined' && globalObj.setTimeout._isMockFunction) {
    return 'legacy';
  }

  if (typeof globalObj.setTimeout.clock !== 'undefined' && typeof jest.getRealSystemTime !== 'undefined') {
    try {
      jest.getRealSystemTime();
      return 'modern';
    } catch (_unused) {}
  }

  return null;
}

var jestFakeTimersAreEnabled = function jestFakeTimersAreEnabled() {
  return Boolean(getJestFakeTimersType());
};

exports.jestFakeTimersAreEnabled = jestFakeTimersAreEnabled;

function setImmediatePolyfill(fn) {
  return globalObj.setTimeout(fn, 0);
}

function bindTimeFunctions() {
  return {
    clearTimeoutFn: globalObj.clearTimeout,
    setImmediateFn: globalObj.setImmediate || setImmediatePolyfill,
    setTimeoutFn: globalObj.setTimeout
  };
}

var _runWithRealTimers = runWithRealTimers(bindTimeFunctions),
    clearTimeoutFn = _runWithRealTimers.clearTimeoutFn,
    setImmediateFn = _runWithRealTimers.setImmediateFn,
    setTimeoutFn = _runWithRealTimers.setTimeoutFn;

exports.setTimeout = setTimeoutFn;
exports.setImmediate = setImmediateFn;
exports.clearTimeout = clearTimeoutFn;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRpbWVycy5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInJ1bldpdGhSZWFsVGltZXJzIiwic2V0VGltZW91dCIsInNldEltbWVkaWF0ZSIsImNsZWFyVGltZW91dCIsImplc3RGYWtlVGltZXJzQXJlRW5hYmxlZCIsImdsb2JhbE9iaiIsIndpbmRvdyIsImdsb2JhbCIsImNhbGxiYWNrIiwiZmFrZVRpbWVyc1R5cGUiLCJnZXRKZXN0RmFrZVRpbWVyc1R5cGUiLCJqZXN0IiwidXNlUmVhbFRpbWVycyIsImNhbGxiYWNrUmV0dXJuVmFsdWUiLCJ1c2VGYWtlVGltZXJzIiwiX2lzTW9ja0Z1bmN0aW9uIiwiY2xvY2siLCJnZXRSZWFsU3lzdGVtVGltZSIsIkJvb2xlYW4iLCJzZXRJbW1lZGlhdGVQb2x5ZmlsbCIsImZuIiwiYmluZFRpbWVGdW5jdGlvbnMiLCJjbGVhclRpbWVvdXRGbiIsInNldEltbWVkaWF0ZUZuIiwic2V0VGltZW91dEZuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0UsaUJBQVIsR0FBNEJBLGlCQUE1QjtBQUNBRixPQUFPLENBQUNHLFVBQVIsR0FBcUJILE9BQU8sQ0FBQ0ksWUFBUixHQUF1QkosT0FBTyxDQUFDSyxZQUFSLEdBQXVCTCxPQUFPLENBQUNNLHdCQUFSLEdBQW1DLEtBQUssQ0FBM0c7QUFJQSxJQUFNQyxTQUFTLEdBQUcsT0FBT0MsTUFBUCxLQUFrQixXQUFsQixHQUFnQ0MsTUFBaEMsR0FBeUNELE1BQTNEOztBQUVBLFNBQVNOLGlCQUFULENBQTJCUSxRQUEzQixFQUFxQztBQUNuQyxNQUFNQyxjQUFjLEdBQUdDLHFCQUFxQixFQUE1Qzs7QUFFQSxNQUFJRCxjQUFKLEVBQW9CO0FBQ2xCRSxJQUFBQSxJQUFJLENBQUNDLGFBQUw7QUFDRDs7QUFFRCxNQUFNQyxtQkFBbUIsR0FBR0wsUUFBUSxFQUFwQzs7QUFFQSxNQUFJQyxjQUFKLEVBQW9CO0FBQ2xCRSxJQUFBQSxJQUFJLENBQUNHLGFBQUwsQ0FBbUJMLGNBQW5CO0FBQ0Q7O0FBRUQsU0FBT0ksbUJBQVA7QUFDRDs7QUFFRCxTQUFTSCxxQkFBVCxHQUFpQztBQUUvQixNQUFJLE9BQU9DLElBQVAsS0FBZ0IsV0FBaEIsSUFBK0IsT0FBT04sU0FBUyxDQUFDSixVQUFqQixLQUFnQyxXQUFuRSxFQUFnRjtBQUM5RSxXQUFPLElBQVA7QUFDRDs7QUFFRCxNQUFJLE9BQU9JLFNBQVMsQ0FBQ0osVUFBVixDQUFxQmMsZUFBNUIsS0FBZ0QsV0FBaEQsSUFBK0RWLFNBQVMsQ0FBQ0osVUFBVixDQUFxQmMsZUFBeEYsRUFBeUc7QUFDdkcsV0FBTyxRQUFQO0FBQ0Q7O0FBRUQsTUFBSSxPQUFPVixTQUFTLENBQUNKLFVBQVYsQ0FBcUJlLEtBQTVCLEtBQXNDLFdBQXRDLElBQ0osT0FBT0wsSUFBSSxDQUFDTSxpQkFBWixLQUFrQyxXQURsQyxFQUMrQztBQUM3QyxRQUFJO0FBR0ZOLE1BQUFBLElBQUksQ0FBQ00saUJBQUw7QUFDQSxhQUFPLFFBQVA7QUFDRCxLQUxELENBS0UsZ0JBQU0sQ0FDUDtBQUNGOztBQUVELFNBQU8sSUFBUDtBQUNEOztBQUVELElBQU1iLHdCQUF3QixHQUFHLFNBQTNCQSx3QkFBMkI7QUFBQSxTQUFNYyxPQUFPLENBQUNSLHFCQUFxQixFQUF0QixDQUFiO0FBQUEsQ0FBakM7O0FBR0FaLE9BQU8sQ0FBQ00sd0JBQVIsR0FBbUNBLHdCQUFuQzs7QUFFQSxTQUFTZSxvQkFBVCxDQUE4QkMsRUFBOUIsRUFBa0M7QUFDaEMsU0FBT2YsU0FBUyxDQUFDSixVQUFWLENBQXFCbUIsRUFBckIsRUFBeUIsQ0FBekIsQ0FBUDtBQUNEOztBQUVELFNBQVNDLGlCQUFULEdBQTZCO0FBQzNCLFNBQU87QUFDTEMsSUFBQUEsY0FBYyxFQUFFakIsU0FBUyxDQUFDRixZQURyQjtBQUVMb0IsSUFBQUEsY0FBYyxFQUFFbEIsU0FBUyxDQUFDSCxZQUFWLElBQTBCaUIsb0JBRnJDO0FBR0xLLElBQUFBLFlBQVksRUFBRW5CLFNBQVMsQ0FBQ0o7QUFIbkIsR0FBUDtBQUtEOztBQUVELHlCQUlJRCxpQkFBaUIsQ0FBQ3FCLGlCQUFELENBSnJCO0FBQUEsSUFDRUMsY0FERixzQkFDRUEsY0FERjtBQUFBLElBRUVDLGNBRkYsc0JBRUVBLGNBRkY7QUFBQSxJQUdFQyxZQUhGLHNCQUdFQSxZQUhGOztBQUtBMUIsT0FBTyxDQUFDRyxVQUFSLEdBQXFCdUIsWUFBckI7QUFDQTFCLE9BQU8sQ0FBQ0ksWUFBUixHQUF1QnFCLGNBQXZCO0FBQ0F6QixPQUFPLENBQUNLLFlBQVIsR0FBdUJtQixjQUF2QiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5ydW5XaXRoUmVhbFRpbWVycyA9IHJ1bldpdGhSZWFsVGltZXJzO1xuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSBleHBvcnRzLmNsZWFyVGltZW91dCA9IGV4cG9ydHMuamVzdEZha2VUaW1lcnNBcmVFbmFibGVkID0gdm9pZCAwO1xuLy8gTW9zdCBjb250ZW50IG9mIHRoaXMgZmlsZSBzb3VyY2VkIGRpcmVjdGx5IGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3Rlc3RpbmctbGlicmFyeS9kb20tdGVzdGluZy1saWJyYXJ5L2Jsb2IvbWFpbi9zcmMvaGVscGVycy5qc1xuXG4vKiBnbG9iYWxzIGplc3QgKi9cbmNvbnN0IGdsb2JhbE9iaiA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogd2luZG93OyAvLyBDdXJyZW50bHkgdGhpcyBmbiBvbmx5IHN1cHBvcnRzIGplc3QgdGltZXJzLCBidXQgaXQgY291bGQgc3VwcG9ydCBvdGhlciB0ZXN0IHJ1bm5lcnMgaW4gdGhlIGZ1dHVyZS5cblxuZnVuY3Rpb24gcnVuV2l0aFJlYWxUaW1lcnMoY2FsbGJhY2spIHtcbiAgY29uc3QgZmFrZVRpbWVyc1R5cGUgPSBnZXRKZXN0RmFrZVRpbWVyc1R5cGUoKTtcblxuICBpZiAoZmFrZVRpbWVyc1R5cGUpIHtcbiAgICBqZXN0LnVzZVJlYWxUaW1lcnMoKTtcbiAgfVxuXG4gIGNvbnN0IGNhbGxiYWNrUmV0dXJuVmFsdWUgPSBjYWxsYmFjaygpO1xuXG4gIGlmIChmYWtlVGltZXJzVHlwZSkge1xuICAgIGplc3QudXNlRmFrZVRpbWVycyhmYWtlVGltZXJzVHlwZSk7XG4gIH1cblxuICByZXR1cm4gY2FsbGJhY2tSZXR1cm5WYWx1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0SmVzdEZha2VUaW1lcnNUeXBlKCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHR5cGVvZiBqZXN0ID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgZ2xvYmFsT2JqLnNldFRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAodHlwZW9mIGdsb2JhbE9iai5zZXRUaW1lb3V0Ll9pc01vY2tGdW5jdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsT2JqLnNldFRpbWVvdXQuX2lzTW9ja0Z1bmN0aW9uKSB7XG4gICAgcmV0dXJuICdsZWdhY3knO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBnbG9iYWxPYmouc2V0VGltZW91dC5jbG9jayAhPT0gJ3VuZGVmaW5lZCcgJiYgLy8gJEZsb3dJZ25vcmVbcHJvcC1taXNzaW5nXVxuICB0eXBlb2YgamVzdC5nZXRSZWFsU3lzdGVtVGltZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0cnkge1xuICAgICAgLy8gamVzdC5nZXRSZWFsU3lzdGVtVGltZSBpcyBvbmx5IHN1cHBvcnRlZCBmb3IgSmVzdCdzIGBtb2Rlcm5gIGZha2UgdGltZXJzIGFuZCBvdGhlcndpc2UgdGhyb3dzXG4gICAgICAvLyAkRmxvd0V4cGVjdGVkRXJyb3JcbiAgICAgIGplc3QuZ2V0UmVhbFN5c3RlbVRpbWUoKTtcbiAgICAgIHJldHVybiAnbW9kZXJuJztcbiAgICB9IGNhdGNoIHsvLyBub3QgdXNpbmcgSmVzdCdzIG1vZGVybiBmYWtlIHRpbWVyc1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5jb25zdCBqZXN0RmFrZVRpbWVyc0FyZUVuYWJsZWQgPSAoKSA9PiBCb29sZWFuKGdldEplc3RGYWtlVGltZXJzVHlwZSgpKTsgLy8gd2Ugb25seSBydW4gb3VyIHRlc3RzIGluIG5vZGUsIGFuZCBzZXRJbW1lZGlhdGUgaXMgc3VwcG9ydGVkIGluIG5vZGUuXG5cblxuZXhwb3J0cy5qZXN0RmFrZVRpbWVyc0FyZUVuYWJsZWQgPSBqZXN0RmFrZVRpbWVyc0FyZUVuYWJsZWQ7XG5cbmZ1bmN0aW9uIHNldEltbWVkaWF0ZVBvbHlmaWxsKGZuKSB7XG4gIHJldHVybiBnbG9iYWxPYmouc2V0VGltZW91dChmbiwgMCk7XG59XG5cbmZ1bmN0aW9uIGJpbmRUaW1lRnVuY3Rpb25zKCkge1xuICByZXR1cm4ge1xuICAgIGNsZWFyVGltZW91dEZuOiBnbG9iYWxPYmouY2xlYXJUaW1lb3V0LFxuICAgIHNldEltbWVkaWF0ZUZuOiBnbG9iYWxPYmouc2V0SW1tZWRpYXRlIHx8IHNldEltbWVkaWF0ZVBvbHlmaWxsLFxuICAgIHNldFRpbWVvdXRGbjogZ2xvYmFsT2JqLnNldFRpbWVvdXRcbiAgfTtcbn1cblxuY29uc3Qge1xuICBjbGVhclRpbWVvdXRGbixcbiAgc2V0SW1tZWRpYXRlRm4sXG4gIHNldFRpbWVvdXRGblxufSA9IHJ1bldpdGhSZWFsVGltZXJzKGJpbmRUaW1lRnVuY3Rpb25zKTtcbmV4cG9ydHMuc2V0VGltZW91dCA9IHNldFRpbWVvdXRGbjtcbmV4cG9ydHMuc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlRm47XG5leHBvcnRzLmNsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dEZuOyJdfQ==