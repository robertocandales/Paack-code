d74bdbc533d47ebd518b312160239754
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryByTestId = exports.queryAllByTestId = exports.getByTestId = exports.getAllByTestId = exports.findByTestId = exports.findAllByTestId = void 0;

var _matches = require("../matches");

var _makeQueries = require("./makeQueries");

var getNodeByTestId = function getNodeByTestId(node, testID) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var exact = options.exact,
      normalizer = options.normalizer;
  return (0, _matches.matches)(testID, node.props.testID, normalizer, exact);
};

var queryAllByTestId = function queryAllByTestId(instance) {
  return function queryAllByTestIdFn(testId, queryOptions) {
    var results = instance.findAll(function (node) {
      return getNodeByTestId(node, testId, queryOptions);
    }).filter(function (element) {
      return typeof element.type === 'string';
    });
    return results;
  };
};

exports.queryAllByTestId = queryAllByTestId;

var getMultipleError = function getMultipleError(testId) {
  return "Found multiple elements with testID: " + String(testId);
};

var getMissingError = function getMissingError(testId) {
  return "Unable to find an element with testID: " + String(testId);
};

var _ref = (0, _makeQueries.makeQueries)(queryAllByTestId, getMissingError, getMultipleError),
    getByTestId = _ref.getBy,
    getAllByTestId = _ref.getAllBy,
    queryByTestId = _ref.queryBy,
    findByTestId = _ref.findBy,
    findAllByTestId = _ref.findAllBy;

exports.findAllByTestId = findAllByTestId;
exports.findByTestId = findByTestId;
exports.queryByTestId = queryByTestId;
exports.getAllByTestId = getAllByTestId;
exports.getByTestId = getByTestId;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ5VGVzdElkLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicXVlcnlCeVRlc3RJZCIsInF1ZXJ5QWxsQnlUZXN0SWQiLCJnZXRCeVRlc3RJZCIsImdldEFsbEJ5VGVzdElkIiwiZmluZEJ5VGVzdElkIiwiZmluZEFsbEJ5VGVzdElkIiwiX21hdGNoZXMiLCJyZXF1aXJlIiwiX21ha2VRdWVyaWVzIiwiZ2V0Tm9kZUJ5VGVzdElkIiwibm9kZSIsInRlc3RJRCIsIm9wdGlvbnMiLCJleGFjdCIsIm5vcm1hbGl6ZXIiLCJtYXRjaGVzIiwicHJvcHMiLCJpbnN0YW5jZSIsInF1ZXJ5QWxsQnlUZXN0SWRGbiIsInRlc3RJZCIsInF1ZXJ5T3B0aW9ucyIsInJlc3VsdHMiLCJmaW5kQWxsIiwiZmlsdGVyIiwiZWxlbWVudCIsInR5cGUiLCJnZXRNdWx0aXBsZUVycm9yIiwiU3RyaW5nIiwiZ2V0TWlzc2luZ0Vycm9yIiwibWFrZVF1ZXJpZXMiLCJnZXRCeSIsImdldEFsbEJ5IiwicXVlcnlCeSIsImZpbmRCeSIsImZpbmRBbGxCeSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLGFBQVIsR0FBd0JGLE9BQU8sQ0FBQ0csZ0JBQVIsR0FBMkJILE9BQU8sQ0FBQ0ksV0FBUixHQUFzQkosT0FBTyxDQUFDSyxjQUFSLEdBQXlCTCxPQUFPLENBQUNNLFlBQVIsR0FBdUJOLE9BQU8sQ0FBQ08sZUFBUixHQUEwQixLQUFLLENBQXhKOztBQUVBLElBQUlDLFFBQVEsR0FBR0MsT0FBTyxjQUF0Qjs7QUFFQSxJQUFJQyxZQUFZLEdBQUdELE9BQU8saUJBQTFCOztBQUVBLElBQU1FLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsQ0FBQ0MsSUFBRCxFQUFPQyxNQUFQLEVBQWdDO0FBQUEsTUFBakJDLE9BQWlCLHVFQUFQLEVBQU87QUFDdEQsTUFDRUMsS0FERixHQUdJRCxPQUhKLENBQ0VDLEtBREY7QUFBQSxNQUVFQyxVQUZGLEdBR0lGLE9BSEosQ0FFRUUsVUFGRjtBQUlBLFNBQU8sQ0FBQyxHQUFHUixRQUFRLENBQUNTLE9BQWIsRUFBc0JKLE1BQXRCLEVBQThCRCxJQUFJLENBQUNNLEtBQUwsQ0FBV0wsTUFBekMsRUFBaURHLFVBQWpELEVBQTZERCxLQUE3RCxDQUFQO0FBQ0QsQ0FORDs7QUFRQSxJQUFNWixnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQW1CLENBQUFnQixRQUFRO0FBQUEsU0FBSSxTQUFTQyxrQkFBVCxDQUE0QkMsTUFBNUIsRUFBb0NDLFlBQXBDLEVBQWtEO0FBQ3JGLFFBQU1DLE9BQU8sR0FBR0osUUFBUSxDQUFDSyxPQUFULENBQWlCLFVBQUFaLElBQUk7QUFBQSxhQUFJRCxlQUFlLENBQUNDLElBQUQsRUFBT1MsTUFBUCxFQUFlQyxZQUFmLENBQW5CO0FBQUEsS0FBckIsRUFBc0VHLE1BQXRFLENBQTZFLFVBQUFDLE9BQU87QUFBQSxhQUFJLE9BQU9BLE9BQU8sQ0FBQ0MsSUFBZixLQUF3QixRQUE1QjtBQUFBLEtBQXBGLENBQWhCO0FBQ0EsV0FBT0osT0FBUDtBQUNELEdBSGdDO0FBQUEsQ0FBakM7O0FBS0F2QixPQUFPLENBQUNHLGdCQUFSLEdBQTJCQSxnQkFBM0I7O0FBRUEsSUFBTXlCLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBbUIsQ0FBQVAsTUFBTTtBQUFBLG1EQUE0Q1EsTUFBTSxDQUFDUixNQUFELENBQWxEO0FBQUEsQ0FBL0I7O0FBRUEsSUFBTVMsZUFBZSxHQUFHLFNBQWxCQSxlQUFrQixDQUFBVCxNQUFNO0FBQUEscURBQThDUSxNQUFNLENBQUNSLE1BQUQsQ0FBcEQ7QUFBQSxDQUE5Qjs7QUFFQSxXQU1JLENBQUMsR0FBR1gsWUFBWSxDQUFDcUIsV0FBakIsRUFBOEI1QixnQkFBOUIsRUFBZ0QyQixlQUFoRCxFQUFpRUYsZ0JBQWpFLENBTko7QUFBQSxJQUNTeEIsV0FEVCxRQUNFNEIsS0FERjtBQUFBLElBRVkzQixjQUZaLFFBRUU0QixRQUZGO0FBQUEsSUFHVy9CLGFBSFgsUUFHRWdDLE9BSEY7QUFBQSxJQUlVNUIsWUFKVixRQUlFNkIsTUFKRjtBQUFBLElBS2E1QixlQUxiLFFBS0U2QixTQUxGOztBQU9BcEMsT0FBTyxDQUFDTyxlQUFSLEdBQTBCQSxlQUExQjtBQUNBUCxPQUFPLENBQUNNLFlBQVIsR0FBdUJBLFlBQXZCO0FBQ0FOLE9BQU8sQ0FBQ0UsYUFBUixHQUF3QkEsYUFBeEI7QUFDQUYsT0FBTyxDQUFDSyxjQUFSLEdBQXlCQSxjQUF6QjtBQUNBTCxPQUFPLENBQUNJLFdBQVIsR0FBc0JBLFdBQXRCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnF1ZXJ5QnlUZXN0SWQgPSBleHBvcnRzLnF1ZXJ5QWxsQnlUZXN0SWQgPSBleHBvcnRzLmdldEJ5VGVzdElkID0gZXhwb3J0cy5nZXRBbGxCeVRlc3RJZCA9IGV4cG9ydHMuZmluZEJ5VGVzdElkID0gZXhwb3J0cy5maW5kQWxsQnlUZXN0SWQgPSB2b2lkIDA7XG5cbnZhciBfbWF0Y2hlcyA9IHJlcXVpcmUoXCIuLi9tYXRjaGVzXCIpO1xuXG52YXIgX21ha2VRdWVyaWVzID0gcmVxdWlyZShcIi4vbWFrZVF1ZXJpZXNcIik7XG5cbmNvbnN0IGdldE5vZGVCeVRlc3RJZCA9IChub2RlLCB0ZXN0SUQsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCB7XG4gICAgZXhhY3QsXG4gICAgbm9ybWFsaXplclxuICB9ID0gb3B0aW9ucztcbiAgcmV0dXJuICgwLCBfbWF0Y2hlcy5tYXRjaGVzKSh0ZXN0SUQsIG5vZGUucHJvcHMudGVzdElELCBub3JtYWxpemVyLCBleGFjdCk7XG59O1xuXG5jb25zdCBxdWVyeUFsbEJ5VGVzdElkID0gaW5zdGFuY2UgPT4gZnVuY3Rpb24gcXVlcnlBbGxCeVRlc3RJZEZuKHRlc3RJZCwgcXVlcnlPcHRpb25zKSB7XG4gIGNvbnN0IHJlc3VsdHMgPSBpbnN0YW5jZS5maW5kQWxsKG5vZGUgPT4gZ2V0Tm9kZUJ5VGVzdElkKG5vZGUsIHRlc3RJZCwgcXVlcnlPcHRpb25zKSkuZmlsdGVyKGVsZW1lbnQgPT4gdHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gJ3N0cmluZycpO1xuICByZXR1cm4gcmVzdWx0cztcbn07XG5cbmV4cG9ydHMucXVlcnlBbGxCeVRlc3RJZCA9IHF1ZXJ5QWxsQnlUZXN0SWQ7XG5cbmNvbnN0IGdldE11bHRpcGxlRXJyb3IgPSB0ZXN0SWQgPT4gYEZvdW5kIG11bHRpcGxlIGVsZW1lbnRzIHdpdGggdGVzdElEOiAke1N0cmluZyh0ZXN0SWQpfWA7XG5cbmNvbnN0IGdldE1pc3NpbmdFcnJvciA9IHRlc3RJZCA9PiBgVW5hYmxlIHRvIGZpbmQgYW4gZWxlbWVudCB3aXRoIHRlc3RJRDogJHtTdHJpbmcodGVzdElkKX1gO1xuXG5jb25zdCB7XG4gIGdldEJ5OiBnZXRCeVRlc3RJZCxcbiAgZ2V0QWxsQnk6IGdldEFsbEJ5VGVzdElkLFxuICBxdWVyeUJ5OiBxdWVyeUJ5VGVzdElkLFxuICBmaW5kQnk6IGZpbmRCeVRlc3RJZCxcbiAgZmluZEFsbEJ5OiBmaW5kQWxsQnlUZXN0SWRcbn0gPSAoMCwgX21ha2VRdWVyaWVzLm1ha2VRdWVyaWVzKShxdWVyeUFsbEJ5VGVzdElkLCBnZXRNaXNzaW5nRXJyb3IsIGdldE11bHRpcGxlRXJyb3IpO1xuZXhwb3J0cy5maW5kQWxsQnlUZXN0SWQgPSBmaW5kQWxsQnlUZXN0SWQ7XG5leHBvcnRzLmZpbmRCeVRlc3RJZCA9IGZpbmRCeVRlc3RJZDtcbmV4cG9ydHMucXVlcnlCeVRlc3RJZCA9IHF1ZXJ5QnlUZXN0SWQ7XG5leHBvcnRzLmdldEFsbEJ5VGVzdElkID0gZ2V0QWxsQnlUZXN0SWQ7XG5leHBvcnRzLmdldEJ5VGVzdElkID0gZ2V0QnlUZXN0SWQ7Il19