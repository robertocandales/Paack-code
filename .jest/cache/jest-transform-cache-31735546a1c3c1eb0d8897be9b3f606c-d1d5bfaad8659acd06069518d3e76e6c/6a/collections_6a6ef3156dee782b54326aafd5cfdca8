2105fd8a9cc2cb48052043bd77565eca
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.printIteratorEntries = printIteratorEntries;
exports.printIteratorValues = printIteratorValues;
exports.printListItems = printListItems;
exports.printObjectProperties = printObjectProperties;

var getKeysOfEnumerableProperties = function getKeysOfEnumerableProperties(object, compareKeys) {
  var keys = Object.keys(object).sort(compareKeys);

  if (Object.getOwnPropertySymbols) {
    Object.getOwnPropertySymbols(object).forEach(function (symbol) {
      if (Object.getOwnPropertyDescriptor(object, symbol).enumerable) {
        keys.push(symbol);
      }
    });
  }

  return keys;
};

function printIteratorEntries(iterator, config, indentation, depth, refs, printer) {
  var separator = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : ': ';
  var result = '';
  var current = iterator.next();

  if (!current.done) {
    result += config.spacingOuter;
    var indentationNext = indentation + config.indent;

    while (!current.done) {
      var name = printer(current.value[0], config, indentationNext, depth, refs);
      var value = printer(current.value[1], config, indentationNext, depth, refs);
      result += indentationNext + name + separator + value;
      current = iterator.next();

      if (!current.done) {
        result += ',' + config.spacingInner;
      } else if (!config.min) {
        result += ',';
      }
    }

    result += config.spacingOuter + indentation;
  }

  return result;
}

function printIteratorValues(iterator, config, indentation, depth, refs, printer) {
  var result = '';
  var current = iterator.next();

  if (!current.done) {
    result += config.spacingOuter;
    var indentationNext = indentation + config.indent;

    while (!current.done) {
      result += indentationNext + printer(current.value, config, indentationNext, depth, refs);
      current = iterator.next();

      if (!current.done) {
        result += ',' + config.spacingInner;
      } else if (!config.min) {
        result += ',';
      }
    }

    result += config.spacingOuter + indentation;
  }

  return result;
}

function printListItems(list, config, indentation, depth, refs, printer) {
  var result = '';

  if (list.length) {
    result += config.spacingOuter;
    var indentationNext = indentation + config.indent;

    for (var i = 0; i < list.length; i++) {
      result += indentationNext;

      if (i in list) {
        result += printer(list[i], config, indentationNext, depth, refs);
      }

      if (i < list.length - 1) {
        result += ',' + config.spacingInner;
      } else if (!config.min) {
        result += ',';
      }
    }

    result += config.spacingOuter + indentation;
  }

  return result;
}

function printObjectProperties(val, config, indentation, depth, refs, printer) {
  var result = '';
  var keys = getKeysOfEnumerableProperties(val, config.compareKeys);

  if (keys.length) {
    result += config.spacingOuter;
    var indentationNext = indentation + config.indent;

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var name = printer(key, config, indentationNext, depth, refs);
      var value = printer(val[key], config, indentationNext, depth, refs);
      result += indentationNext + name + ': ' + value;

      if (i < keys.length - 1) {
        result += ',' + config.spacingInner;
      } else if (!config.min) {
        result += ',';
      }
    }

    result += config.spacingOuter + indentation;
  }

  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbGxlY3Rpb25zLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicHJpbnRJdGVyYXRvckVudHJpZXMiLCJwcmludEl0ZXJhdG9yVmFsdWVzIiwicHJpbnRMaXN0SXRlbXMiLCJwcmludE9iamVjdFByb3BlcnRpZXMiLCJnZXRLZXlzT2ZFbnVtZXJhYmxlUHJvcGVydGllcyIsIm9iamVjdCIsImNvbXBhcmVLZXlzIiwia2V5cyIsInNvcnQiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJmb3JFYWNoIiwic3ltYm9sIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJpdGVyYXRvciIsImNvbmZpZyIsImluZGVudGF0aW9uIiwiZGVwdGgiLCJyZWZzIiwicHJpbnRlciIsInNlcGFyYXRvciIsInJlc3VsdCIsImN1cnJlbnQiLCJuZXh0IiwiZG9uZSIsInNwYWNpbmdPdXRlciIsImluZGVudGF0aW9uTmV4dCIsImluZGVudCIsIm5hbWUiLCJzcGFjaW5nSW5uZXIiLCJtaW4iLCJsaXN0IiwibGVuZ3RoIiwiaSIsInZhbCIsImtleSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLG9CQUFSLEdBQStCQSxvQkFBL0I7QUFDQUYsT0FBTyxDQUFDRyxtQkFBUixHQUE4QkEsbUJBQTlCO0FBQ0FILE9BQU8sQ0FBQ0ksY0FBUixHQUF5QkEsY0FBekI7QUFDQUosT0FBTyxDQUFDSyxxQkFBUixHQUFnQ0EscUJBQWhDOztBQVNBLElBQU1DLDZCQUE2QixHQUFHLFNBQWhDQSw2QkFBZ0MsQ0FBQ0MsTUFBRCxFQUFTQyxXQUFULEVBQXlCO0FBQzdELE1BQU1DLElBQUksR0FBR1gsTUFBTSxDQUFDVyxJ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QUksQ0FBQzBCLE1BQUwsR0FBYyxDQUF0QixFQUF5QjtBQUN2QlgsUUFBQUEsTUFBTSxJQUFJLE1BQU1OLE1BQU0sQ0FBQ2MsWUFBdkI7QUFDRCxPQUZELE1BRU8sSUFBSSxDQUFDZCxNQUFNLENBQUNlLEdBQVosRUFBaUI7QUFDdEJULFFBQUFBLE1BQU0sSUFBSSxHQUFWO0FBQ0Q7QUFDRjs7QUFFREEsSUFBQUEsTUFBTSxJQUFJTixNQUFNLENBQUNVLFlBQVAsR0FBc0JULFdBQWhDO0FBQ0Q7O0FBRUQsU0FBT0ssTUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucHJpbnRJdGVyYXRvckVudHJpZXMgPSBwcmludEl0ZXJhdG9yRW50cmllcztcbmV4cG9ydHMucHJpbnRJdGVyYXRvclZhbHVlcyA9IHByaW50SXRlcmF0b3JWYWx1ZXM7XG5leHBvcnRzLnByaW50TGlzdEl0ZW1zID0gcHJpbnRMaXN0SXRlbXM7XG5leHBvcnRzLnByaW50T2JqZWN0UHJvcGVydGllcyA9IHByaW50T2JqZWN0UHJvcGVydGllcztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cbmNvbnN0IGdldEtleXNPZkVudW1lcmFibGVQcm9wZXJ0aWVzID0gKG9iamVjdCwgY29tcGFyZUtleXMpID0+IHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCkuc29ydChjb21wYXJlS2V5cyk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCkuZm9yRWFjaChzeW1ib2wgPT4ge1xuICAgICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW1ib2wpLmVudW1lcmFibGUpIHtcbiAgICAgICAga2V5cy5wdXNoKHN5bWJvbCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ga2V5cztcbn07XG4vKipcbiAqIFJldHVybiBlbnRyaWVzIChmb3IgZXhhbXBsZSwgb2YgYSBtYXApXG4gKiB3aXRoIHNwYWNpbmcsIGluZGVudGF0aW9uLCBhbmQgY29tbWFcbiAqIHdpdGhvdXQgc3Vycm91bmRpbmcgcHVuY3R1YXRpb24gKGZvciBleGFtcGxlLCBicmFjZXMpXG4gKi9cblxuZnVuY3Rpb24gcHJpbnRJdGVyYXRvckVudHJpZXMoXG4gIGl0ZXJhdG9yLFxuICBjb25maWcsXG4gIGluZGVudGF0aW9uLFxuICBkZXB0aCxcbiAgcmVmcyxcbiAgcHJpbnRlciwgLy8gVG9vIGJhZCwgc28gc2FkIHRoYXQgc2VwYXJhdG9yIGZvciBFQ01BU2NyaXB0IE1hcCBoYXMgYmVlbiAnID0+ICdcbiAgLy8gV2hhdCBhIGRpc3RyYWN0aW5nIGRpZmYgaWYgeW91IGNoYW5nZSBhIGRhdGEgc3RydWN0dXJlIHRvL2Zyb21cbiAgLy8gRUNNQVNjcmlwdCBPYmplY3Qgb3IgSW1tdXRhYmxlLk1hcC9PcmRlcmVkTWFwIHdoaWNoIHVzZSB0aGUgZGVmYXVsdC5cbiAgc2VwYXJhdG9yID0gJzogJ1xuKSB7XG4gIGxldCByZXN1bHQgPSAnJztcbiAgbGV0IGN1cnJlbnQgPSBpdGVyYXRvci5uZXh0KCk7XG5cbiAgaWYgKCFjdXJyZW50LmRvbmUpIHtcbiAgICByZXN1bHQgKz0gY29uZmlnLnNwYWNpbmdPdXRlcjtcbiAgICBjb25zdCBpbmRlbnRhdGlvbk5leHQgPSBpbmRlbnRhdGlvbiArIGNvbmZpZy5pbmRlbnQ7XG5cbiAgICB3aGlsZSAoIWN1cnJlbnQuZG9uZSkge1xuICAgICAgY29uc3QgbmFtZSA9IHByaW50ZXIoXG4gICAgICAgIGN1cnJlbnQudmFsdWVbMF0sXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgaW5kZW50YXRpb25OZXh0LFxuICAgICAgICBkZXB0aCxcbiAgICAgICAgcmVmc1xuICAgICAgKTtcbiAgICAgIGNvbnN0IHZhbHVlID0gcHJpbnRlcihcbiAgICAgICAgY3VycmVudC52YWx1ZVsxXSxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICBpbmRlbnRhdGlvbk5leHQsXG4gICAgICAgIGRlcHRoLFxuICAgICAgICByZWZzXG4gICAgICApO1xuICAgICAgcmVzdWx0ICs9IGluZGVudGF0aW9uTmV4dCArIG5hbWUgKyBzZXBhcmF0b3IgKyB2YWx1ZTtcbiAgICAgIGN1cnJlbnQgPSBpdGVyYXRvci5uZXh0KCk7XG5cbiAgICAgIGlmICghY3VycmVudC5kb25lKSB7XG4gICAgICAgIHJlc3VsdCArPSAnLCcgKyBjb25maWcuc3BhY2luZ0lubmVyO1xuICAgICAgfSBlbHNlIGlmICghY29uZmlnLm1pbikge1xuICAgICAgICByZXN1bHQgKz0gJywnO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJlc3VsdCArPSBjb25maWcuc3BhY2luZ091dGVyICsgaW5kZW50YXRpb247XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBSZXR1cm4gdmFsdWVzIChmb3IgZXhhbXBsZSwgb2YgYSBzZXQpXG4gKiB3aXRoIHNwYWNpbmcsIGluZGVudGF0aW9uLCBhbmQgY29tbWFcbiAqIHdpdGhvdXQgc3Vycm91bmRpbmcgcHVuY3R1YXRpb24gKGJyYWNlcyBvciBicmFja2V0cylcbiAqL1xuXG5mdW5jdGlvbiBwcmludEl0ZXJhdG9yVmFsdWVzKFxuICBpdGVyYXRvcixcbiAgY29uZmlnLFxuICBpbmRlbnRhdGlvbixcbiAgZGVwdGgsXG4gIHJlZnMsXG4gIHByaW50ZXJcbikge1xuICBsZXQgcmVzdWx0ID0gJyc7XG4gIGxldCBjdXJyZW50ID0gaXRlcmF0b3IubmV4dCgpO1xuXG4gIGlmICghY3VycmVudC5kb25lKSB7XG4gICAgcmVzdWx0ICs9IGNvbmZpZy5zcGFjaW5nT3V0ZXI7XG4gICAgY29uc3QgaW5kZW50YXRpb25OZXh0ID0gaW5kZW50YXRpb24gKyBjb25maWcuaW5kZW50O1xuXG4gICAgd2hpbGUgKCFjdXJyZW50LmRvbmUpIHtcbiAgICAgIHJlc3VsdCArPVxuICAgICAgICBpbmRlbnRhdGlvbk5leHQgK1xuICAgICAgICBwcmludGVyKGN1cnJlbnQudmFsdWUsIGNvbmZpZywgaW5kZW50YXRpb25OZXh0LCBkZXB0aCwgcmVmcyk7XG4gICAgICBjdXJyZW50ID0gaXRlcmF0b3IubmV4dCgpO1xuXG4gICAgICBpZiAoIWN1cnJlbnQuZG9uZSkge1xuICAgICAgICByZXN1bHQgKz0gJywnICsgY29uZmlnLnNwYWNpbmdJbm5lcjtcbiAgICAgIH0gZWxzZSBpZiAoIWNvbmZpZy5taW4pIHtcbiAgICAgICAgcmVzdWx0ICs9ICcsJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXN1bHQgKz0gY29uZmlnLnNwYWNpbmdPdXRlciArIGluZGVudGF0aW9uO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogUmV0dXJuIGl0ZW1zIChmb3IgZXhhbXBsZSwgb2YgYW4gYXJyYXkpXG4gKiB3aXRoIHNwYWNpbmcsIGluZGVudGF0aW9uLCBhbmQgY29tbWFcbiAqIHdpdGhvdXQgc3Vycm91bmRpbmcgcHVuY3R1YXRpb24gKGZvciBleGFtcGxlLCBicmFja2V0cylcbiAqKi9cblxuZnVuY3Rpb24gcHJpbnRMaXN0SXRlbXMobGlzdCwgY29uZmlnLCBpbmRlbnRhdGlvbiwgZGVwdGgsIHJlZnMsIHByaW50ZXIpIHtcbiAgbGV0IHJlc3VsdCA9ICcnO1xuXG4gIGlmIChsaXN0Lmxlbmd0aCkge1xuICAgIHJlc3VsdCArPSBjb25maWcuc3BhY2luZ091dGVyO1xuICAgIGNvbnN0IGluZGVudGF0aW9uTmV4dCA9IGluZGVudGF0aW9uICsgY29uZmlnLmluZGVudDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0ICs9IGluZGVudGF0aW9uTmV4dDtcblxuICAgICAgaWYgKGkgaW4gbGlzdCkge1xuICAgICAgICByZXN1bHQgKz0gcHJpbnRlcihsaXN0W2ldLCBjb25maWcsIGluZGVudGF0aW9uTmV4dCwgZGVwdGgsIHJlZnMpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaSA8IGxpc3QubGVuZ3RoIC0gMSkge1xuICAgICAgICByZXN1bHQgKz0gJywnICsgY29uZmlnLnNwYWNpbmdJbm5lcjtcbiAgICAgIH0gZWxzZSBpZiAoIWNvbmZpZy5taW4pIHtcbiAgICAgICAgcmVzdWx0ICs9ICcsJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXN1bHQgKz0gY29uZmlnLnNwYWNpbmdPdXRlciArIGluZGVudGF0aW9uO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogUmV0dXJuIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0XG4gKiB3aXRoIHNwYWNpbmcsIGluZGVudGF0aW9uLCBhbmQgY29tbWFcbiAqIHdpdGhvdXQgc3Vycm91bmRpbmcgcHVuY3R1YXRpb24gKGZvciBleGFtcGxlLCBicmFjZXMpXG4gKi9cblxuZnVuY3Rpb24gcHJpbnRPYmplY3RQcm9wZXJ0aWVzKHZhbCwgY29uZmlnLCBpbmRlbnRhdGlvbiwgZGVwdGgsIHJlZnMsIHByaW50ZXIpIHtcbiAgbGV0IHJlc3VsdCA9ICcnO1xuICBjb25zdCBrZXlzID0gZ2V0S2V5c09mRW51bWVyYWJsZVByb3BlcnRpZXModmFsLCBjb25maWcuY29tcGFyZUtleXMpO1xuXG4gIGlmIChrZXlzLmxlbmd0aCkge1xuICAgIHJlc3VsdCArPSBjb25maWcuc3BhY2luZ091dGVyO1xuICAgIGNvbnN0IGluZGVudGF0aW9uTmV4dCA9IGluZGVudGF0aW9uICsgY29uZmlnLmluZGVudDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgIGNvbnN0IG5hbWUgPSBwcmludGVyKGtleSwgY29uZmlnLCBpbmRlbnRhdGlvbk5leHQsIGRlcHRoLCByZWZzKTtcbiAgICAgIGNvbnN0IHZhbHVlID0gcHJpbnRlcih2YWxba2V5XSwgY29uZmlnLCBpbmRlbnRhdGlvbk5leHQsIGRlcHRoLCByZWZzKTtcbiAgICAgIHJlc3VsdCArPSBpbmRlbnRhdGlvbk5leHQgKyBuYW1lICsgJzogJyArIHZhbHVlO1xuXG4gICAgICBpZiAoaSA8IGtleXMubGVuZ3RoIC0gMSkge1xuICAgICAgICByZXN1bHQgKz0gJywnICsgY29uZmlnLnNwYWNpbmdJbm5lcjtcbiAgICAgIH0gZWxzZSBpZiAoIWNvbmZpZy5taW4pIHtcbiAgICAgICAgcmVzdWx0ICs9ICcsJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXN1bHQgKz0gY29uZmlnLnNwYWNpbmdPdXRlciArIGluZGVudGF0aW9uO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdfQ==