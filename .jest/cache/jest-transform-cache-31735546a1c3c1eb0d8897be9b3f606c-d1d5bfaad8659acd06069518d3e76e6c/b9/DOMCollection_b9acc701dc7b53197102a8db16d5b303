aa89a190d2527027aec6ff945a54f471
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = exports.serialize = exports.test = void 0;

var _collections = require("../collections");

var SPACE = ' ';
var OBJECT_NAMES = ['DOMStringMap', 'NamedNodeMap'];
var ARRAY_REGEXP = /^(HTML\w*Collection|NodeList)$/;

var testName = function testName(name) {
  return OBJECT_NAMES.indexOf(name) !== -1 || ARRAY_REGEXP.test(name);
};

var test = function test(val) {
  return val && val.constructor && !!val.constructor.name && testName(val.constructor.name);
};

exports.test = test;

var isNamedNodeMap = function isNamedNodeMap(collection) {
  return collection.constructor.name === 'NamedNodeMap';
};

var serialize = function serialize(collection, config, indentation, depth, refs, printer) {
  var name = collection.constructor.name;

  if (++depth > config.maxDepth) {
    return '[' + name + ']';
  }

  return (config.min ? '' : name + SPACE) + (OBJECT_NAMES.indexOf(name) !== -1 ? '{' + (0, _collections.printObjectProperties)(isNamedNodeMap(collection) ? Array.from(collection).reduce(function (props, attribute) {
    props[attribute.name] = attribute.value;
    return props;
  }, {}) : _objectSpread({}, collection), config, indentation, depth, refs, printer) + '}' : '[' + (0, _collections.printListItems)(Array.from(collection), config, indentation, depth, refs, printer) + ']');
};

exports.serialize = serialize;
var plugin = {
  serialize: serialize,
  test: test
};
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRPTUNvbGxlY3Rpb24uanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0Iiwic2VyaWFsaXplIiwidGVzdCIsIl9jb2xsZWN0aW9ucyIsInJlcXVpcmUiLCJTUEFDRSIsIk9CSkVDVF9OQU1FUyIsIkFSUkFZX1JFR0VYUCIsInRlc3ROYW1lIiwibmFtZSIsImluZGV4T2YiLCJ2YWwiLCJjb25zdHJ1Y3RvciIsImlzTmFtZWROb2RlTWFwIiwiY29sbGVjdGlvbiIsImNvbmZpZyIsImluZGVudGF0aW9uIiwiZGVwdGgiLCJyZWZzIiwicHJpbnRlciIsIm1heERlcHRoIiwibWluIiwicHJpbnRPYmplY3RQcm9wZXJ0aWVzIiwiQXJyYXkiLCJmcm9tIiwicmVkdWNlIiwicHJvcHMiLCJhdHRyaWJ1dGUiLCJwcmludExpc3RJdGVtcyIsInBsdWdpbiIsIl9kZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztBQUVBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxFQUFBQSxLQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUQsT0FBTyxDQUFDRSxPQUFSLEdBQWtCRixPQUFPLENBQUNHLFNBQVIsR0FBb0JILE9BQU8sQ0FBQ0ksSUFBUixHQUFlLEtBQUssQ0FBMUQ7O0FBRUEsSUFBSUMsWUFBWSxHQUFHQyxPQUFPLGtCQUExQjs7QUFVQSxJQUFNQyxLQUFLLEdBQUcsR0FBZDtBQUNBLElBQU1DLFlBQVksR0FBRyxDQUFDLGNBQUQsRUFBaUIsY0FBakIsQ0FBckI7QUFDQSxJQUFNQyxZQUFZLEdBQUcsZ0NBQXJCOztBQUVBLElBQU1DLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQUFDLElBQUk7QUFBQSxTQUNuQkgsWUFBWSxDQUFDSSxPQUFiLENBQXFCRCxJQUFyQixNQUErQixDQUFDLENBQWhDLElBQXFDRixZQUFZLENBQUNMLElBQWIsQ0FBa0JPLElBQWxCLENBRGxCO0FBQUEsQ0FBckI7O0FBR0EsSUFBTVAsSUFBSSxHQUFHLFNBQVBBLElBQU8sQ0FBQVMsR0FBRztBQUFBLFNBQ2RBLEdBQUcsSUFDSEEsR0FBRyxDQUFDQyxXQURKLElBRUEsQ0FBQyxDQUFDRCxHQUFHLENBQUNDLFdBQUosQ0FBZ0JILElBRmxCLElBR0FELFFBQVEsQ0FBQ0csR0FBRyxDQUFDQyxXQUFKLENBQWdCSCxJQUFqQixDQUpNO0FBQUEsQ0FBaEI7O0FBTUFYLE9BQU8sQ0FBQ0ksSUFBUixHQUFlQSxJQUFmOztBQUVBLElBQU1XLGNBQWMsR0FBRyxTQUFqQkEsY0FBaUIsQ0FBQUMsVUFBVTtBQUFBLFNBQy9CQSxVQUFVLENBQUNGLFdBQVgsQ0FBdUJILElBQXZCLEtBQWdDLGNBREQ7QUFBQSxDQUFqQzs7QUFHQSxJQUFNUixTQUFTLEdBQUcsU0FBWkEsU0FBWSxDQUFDYSxVQUFELEVBQWFDLE1BQWIsRUFBcUJDLFdBQXJCLEVBQWtDQyxLQUFsQyxFQUF5Q0MsSUFBekMsRUFBK0NDLE9BQS9DLEVBQTJEO0FBQzNFLE1BQU1WLElBQUksR0FBR0ssVUFBVSxDQUFDRixXQUFYLENBQXVCSCxJQUFwQzs7QUFFQSxNQUFJLEVBQUVRLEtBQUYsR0FBVUYsTUFBTSxDQUFDSyxRQUFyQixFQUErQjtBQUM3QixXQUFPLE1BQU1YLElBQU4sR0FBYSxHQUFwQjtBQUNEOztBQUVELFNBQ0UsQ0FBQ00sTUFBTSxDQUFDTSxHQUFQLEdBQWEsRUFBYixHQUFrQlosSUFBSSxHQUFHSixLQUExQixLQUNDQyxZQUFZLENBQUNJLE9BQWIsQ0FBcUJELElBQXJCLE1BQStCLENBQUMsQ0FBaEMsR0FDRyxNQUNBLENBQUMsR0FBR04sWUFBWSxDQUFDbUIscUJBQWpCLEVBQ0VULGNBQWMsQ0FBQ0MsVUFBRCxDQUFkLEdBQ0lTLEtBQUssQ0FBQ0MsSUFBTixDQUFXVixVQUFYLEVBQXVCVyxNQUF2QixDQUE4QixVQUFDQyxLQUFELEVBQVFDLFNBQVIsRUFBc0I7QUFDbERELElBQUFBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDbEIsSUFBWCxDQUFMLEdBQXdCa0IsU0FBUyxDQUFDNUIsS0FBbEM7QUFDQSxXQUFPMkIsS0FBUDtBQUNELEdBSEQsRUFHRyxFQUhILENBREoscUJBS1FaLFVBTFIsQ0FERixFQU9FQyxNQVBGLEVBUUVDLFdBUkYsRUFTRUMsS0FURixFQVVFQyxJQVZGLEVBV0VDLE9BWEYsQ0FEQSxHQWNBLEdBZkgsR0FnQkcsTUFDQSxDQUFDLEdBQUdoQixZQUFZLENBQUN5QixjQUFqQixFQUNFTCxLQUFLLENBQUNDLElBQU4sQ0FBV1YsVUFBWCxDQURGLEVBRUVDLE1BRkYsRUFHRUMsV0FIRixFQUlFQyxLQUpGLEVBS0VDLElBTEYsRUFNRUMsT0FORixDQURBLEdBU0EsR0ExQkosQ0FERjtBQTZCRCxDQXBDRDs7QUFzQ0FyQixPQUFPLENBQUNHLFNBQVIsR0FBb0JBLFNBQXBCO0FBQ0EsSUFBTTRCLE1BQU0sR0FBRztBQUNiNUIsRUFBQUEsU0FBUyxFQUFUQSxTQURhO0FBRWJDLEVBQUFBLElBQUksRUFBSkE7QUFGYSxDQUFmO0FBSUEsSUFBSTRCLFFBQVEsR0FBR0QsTUFBZjtBQUNBL0IsT0FBTyxDQUFDRSxPQUFSLEdBQWtCOEIsUUFBbEIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zZXJpYWxpemUgPSBleHBvcnRzLnRlc3QgPSB2b2lkIDA7XG5cbnZhciBfY29sbGVjdGlvbnMgPSByZXF1aXJlKCcuLi9jb2xsZWN0aW9ucycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qIGVzbGludC1kaXNhYmxlIGxvY2FsL2Jhbi10eXBlcy1ldmVudHVhbGx5ICovXG5jb25zdCBTUEFDRSA9ICcgJztcbmNvbnN0IE9CSkVDVF9OQU1FUyA9IFsnRE9NU3RyaW5nTWFwJywgJ05hbWVkTm9kZU1hcCddO1xuY29uc3QgQVJSQVlfUkVHRVhQID0gL14oSFRNTFxcdypDb2xsZWN0aW9ufE5vZGVMaXN0KSQvO1xuXG5jb25zdCB0ZXN0TmFtZSA9IG5hbWUgPT5cbiAgT0JKRUNUX05BTUVTLmluZGV4T2YobmFtZSkgIT09IC0xIHx8IEFSUkFZX1JFR0VYUC50ZXN0KG5hbWUpO1xuXG5jb25zdCB0ZXN0ID0gdmFsID0+XG4gIHZhbCAmJlxuICB2YWwuY29uc3RydWN0b3IgJiZcbiAgISF2YWwuY29uc3RydWN0b3IubmFtZSAmJlxuICB0ZXN0TmFtZSh2YWwuY29uc3RydWN0b3IubmFtZSk7XG5cbmV4cG9ydHMudGVzdCA9IHRlc3Q7XG5cbmNvbnN0IGlzTmFtZWROb2RlTWFwID0gY29sbGVjdGlvbiA9PlxuICBjb2xsZWN0aW9uLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdOYW1lZE5vZGVNYXAnO1xuXG5jb25zdCBzZXJpYWxpemUgPSAoY29sbGVjdGlvbiwgY29uZmlnLCBpbmRlbnRhdGlvbiwgZGVwdGgsIHJlZnMsIHByaW50ZXIpID0+IHtcbiAgY29uc3QgbmFtZSA9IGNvbGxlY3Rpb24uY29uc3RydWN0b3IubmFtZTtcblxuICBpZiAoKytkZXB0aCA+IGNvbmZpZy5tYXhEZXB0aCkge1xuICAgIHJldHVybiAnWycgKyBuYW1lICsgJ10nO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICAoY29uZmlnLm1pbiA/ICcnIDogbmFtZSArIFNQQUNFKSArXG4gICAgKE9CSkVDVF9OQU1FUy5pbmRleE9mKG5hbWUpICE9PSAtMVxuICAgICAgPyAneycgK1xuICAgICAgICAoMCwgX2NvbGxlY3Rpb25zLnByaW50T2JqZWN0UHJvcGVydGllcykoXG4gICAgICAgICAgaXNOYW1lZE5vZGVNYXAoY29sbGVjdGlvbilcbiAgICAgICAgICAgID8gQXJyYXkuZnJvbShjb2xsZWN0aW9uKS5yZWR1Y2UoKHByb3BzLCBhdHRyaWJ1dGUpID0+IHtcbiAgICAgICAgICAgICAgICBwcm9wc1thdHRyaWJ1dGUubmFtZV0gPSBhdHRyaWJ1dGUudmFsdWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3BzO1xuICAgICAgICAgICAgICB9LCB7fSlcbiAgICAgICAgICAgIDogey4uLmNvbGxlY3Rpb259LFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICBpbmRlbnRhdGlvbixcbiAgICAgICAgICBkZXB0aCxcbiAgICAgICAgICByZWZzLFxuICAgICAgICAgIHByaW50ZXJcbiAgICAgICAgKSArXG4gICAgICAgICd9J1xuICAgICAgOiAnWycgK1xuICAgICAgICAoMCwgX2NvbGxlY3Rpb25zLnByaW50TGlzdEl0ZW1zKShcbiAgICAgICAgICBBcnJheS5mcm9tKGNvbGxlY3Rpb24pLFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICBpbmRlbnRhdGlvbixcbiAgICAgICAgICBkZXB0aCxcbiAgICAgICAgICByZWZzLFxuICAgICAgICAgIHByaW50ZXJcbiAgICAgICAgKSArXG4gICAgICAgICddJylcbiAgKTtcbn07XG5cbmV4cG9ydHMuc2VyaWFsaXplID0gc2VyaWFsaXplO1xuY29uc3QgcGx1Z2luID0ge1xuICBzZXJpYWxpemUsXG4gIHRlc3Rcbn07XG52YXIgX2RlZmF1bHQgPSBwbHVnaW47XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbiJdfQ==