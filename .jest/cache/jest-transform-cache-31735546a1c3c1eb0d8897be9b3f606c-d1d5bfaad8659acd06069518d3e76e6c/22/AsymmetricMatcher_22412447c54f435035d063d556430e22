e84b583423dea5dfd84ee54d3b934fa1
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = exports.test = exports.serialize = void 0;

var _collections = require("../collections");

var global = function () {
  if (typeof globalThis !== 'undefined') {
    return globalThis;
  } else if (typeof global !== 'undefined') {
    return global;
  } else if (typeof self !== 'undefined') {
    return self;
  } else if (typeof window !== 'undefined') {
    return window;
  } else {
    return Function('return this')();
  }
}();

var Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;
var asymmetricMatcher = typeof Symbol === 'function' && Symbol.for ? Symbol.for('jest.asymmetricMatcher') : 0x1357a5;
var SPACE = ' ';

var serialize = function serialize(val, config, indentation, depth, refs, printer) {
  var stringedValue = val.toString();

  if (stringedValue === 'ArrayContaining' || stringedValue === 'ArrayNotContaining') {
    if (++depth > config.maxDepth) {
      return '[' + stringedValue + ']';
    }

    return stringedValue + SPACE + '[' + (0, _collections.printListItems)(val.sample, config, indentation, depth, refs, printer) + ']';
  }

  if (stringedValue === 'ObjectContaining' || stringedValue === 'ObjectNotContaining') {
    if (++depth > config.maxDepth) {
      return '[' + stringedValue + ']';
    }

    return stringedValue + SPACE + '{' + (0, _collections.printObjectProperties)(val.sample, config, indentation, depth, refs, printer) + '}';
  }

  if (stringedValue === 'StringMatching' || stringedValue === 'StringNotMatching') {
    return stringedValue + SPACE + printer(val.sample, config, indentation, depth, refs);
  }

  if (stringedValue === 'StringContaining' || stringedValue === 'StringNotContaining') {
    return stringedValue + SPACE + printer(val.sample, config, indentation, depth, refs);
  }

  return val.toAsymmetricMatcher();
};

exports.serialize = serialize;

var test = function test(val) {
  return val && val.$$typeof === asymmetricMatcher;
};

exports.test = test;
var plugin = {
  serialize: serialize,
  test: test
};
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFzeW1tZXRyaWNNYXRjaGVyLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsInRlc3QiLCJzZXJpYWxpemUiLCJfY29sbGVjdGlvbnMiLCJyZXF1aXJlIiwiZ2xvYmFsIiwiZ2xvYmFsVGhpcyIsInNlbGYiLCJ3aW5kb3ciLCJGdW5jdGlvbiIsIlN5bWJvbCIsImFzeW1tZXRyaWNNYXRjaGVyIiwiZm9yIiwiU1BBQ0UiLCJ2YWwiLCJjb25maWciLCJpbmRlbnRhdGlvbiIsImRlcHRoIiwicmVmcyIsInByaW50ZXIiLCJzdHJpbmdlZFZhbHVlIiwidG9TdHJpbmciLCJtYXhEZXB0aCIsInByaW50TGlzdEl0ZW1zIiwic2FtcGxlIiwicHJpbnRPYmplY3RQcm9wZXJ0aWVzIiwidG9Bc3ltbWV0cmljTWF0Y2hlciIsIiQkdHlwZW9mIiwicGx1Z2luIiwiX2RlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxFQUFBQSxLQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUQsT0FBTyxDQUFDRSxPQUFSLEdBQWtCRixPQUFPLENBQUNHLElBQVIsR0FBZUgsT0FBTyxDQUFDSSxTQUFSLEdBQW9CLEtBQUssQ0FBMUQ7O0FBRUEsSUFBSUMsWUFBWSxHQUFHQyxPQUFPLGtCQUExQjs7QUFFQSxJQUFJQyxNQUFNLEdBQUksWUFBWTtBQUN4QixNQUFJLE9BQU9DLFVBQVAsS0FBc0IsV0FBMUIsRUFBdUM7QUFDckMsV0FBT0EsVUFBUDtBQUNELEdBRkQsTUFFTyxJQUFJLE9BQU9ELE1BQVAsS0FBa0IsV0FBdEIsRUFBbUM7QUFDeEMsV0FBT0EsTUFBUDtBQUNELEdBRk0sTUFFQSxJQUFJLE9BQU9FLElBQVAsS0FBZ0IsV0FBcEIsRUFBaUM7QUFDdEMsV0FBT0EsSUFBUDtBQUNELEdBRk0sTUFFQSxJQUFJLE9BQU9DLE1BQVAsS0FBa0IsV0FBdEIsRUFBbUM7QUFDeEMsV0FBT0EsTUFBUDtBQUNELEdBRk0sTUFFQTtBQUNMLFdBQU9DLFFBQVEsQ0FBQyxhQUFELENBQVIsRUFBUDtBQUNEO0FBQ0YsQ0FaWSxFQUFiOztBQWNBLElBQUlDLE1BQU0sR0FBR0wsTUFBTSxDQUFDLDBCQUFELENBQU4sSUFBc0NBLE1BQU0sQ0FBQ0ssTUFBMUQ7QUFDQSxJQUFNQyxpQkFBaUIsR0FDckIsT0FBT0QsTUFBUCxLQUFrQixVQUFsQixJQUFnQ0EsTUFBTSxDQUFDRSxHQUF2QyxHQUNJRixNQUFNLENBQUNFLEdBQVAsQ0FBVyx3QkFBWCxDQURKLEdBRUksUUFITjtBQUlBLElBQU1DLEtBQUssR0FBRyxHQUFkOztBQUVBLElBQU1YLFNBQVMsR0FBRyxTQUFaQSxTQUFZLENBQUNZLEdBQUQsRUFBTUMsTUFBTixFQUFjQyxXQUFkLEVBQTJCQyxLQUEzQixFQUFrQ0MsSUFBbEMsRUFBd0NDLE9BQXhDLEVBQW9EO0FBQ3BFLE1BQU1DLGFBQWEsR0FBR04sR0FBRyxDQUFDTyxRQUFKLEVBQXRCOztBQUVBLE1BQ0VELGFBQWEsS0FBSyxpQkFBbEIsSUFDQUEsYUFBYSxLQUFLLG9CQUZwQixFQUdFO0FBQ0EsUUFBSSxFQUFFSCxLQUFGLEdBQVVGLE1BQU0sQ0FBQ08sUUFBckIsRUFBK0I7QUFDN0IsYUFBTyxNQUFNRixhQUFOLEdBQXNCLEdBQTdCO0FBQ0Q7O0FBRUQsV0FDRUEsYUFBYSxHQUNiUCxLQURBLEdBRUEsR0FGQSxHQUdBLENBQUMsR0FBR1YsWUFBWSxDQUFDb0IsY0FBakIsRUFDRVQsR0FBRyxDQUFDVSxNQUROLEVBRUVULE1BRkYsRUFHRUMsV0FIRixFQUlFQyxLQUpGLEVBS0VDLElBTEYsRUFNRUMsT0FORixDQUhBLEdBV0EsR0FaRjtBQWNEOztBQUVELE1BQ0VDLGFBQWEsS0FBSyxrQkFBbEIsSUFDQUEsYUFBYSxLQUFLLHFCQUZwQixFQUdFO0FBQ0EsUUFBSSxFQUFFSCxLQUFGLEdBQVVGLE1BQU0sQ0FBQ08sUUFBckIsRUFBK0I7QUFDN0IsYUFBTyxNQUFNRixhQUFOLEdBQXNCLEdBQTdCO0FBQ0Q7O0FBRUQsV0FDRUEsYUFBYSxHQUNiUCxLQURBLEdBRUEsR0FGQSxHQUdBLENBQUMsR0FBR1YsWUFBWSxDQUFDc0IscUJBQWpCLEVBQ0VYLEdBQUcsQ0FBQ1UsTUFETixFQUVFVCxNQUZGLEVBR0VDLFdBSEYsRUFJRUMsS0FKRixFQUtFQyxJQUxGLEVBTUVDLE9BTkYsQ0FIQSxHQVdBLEdBWkY7QUFjRDs7QUFFRCxNQUNFQyxhQUFhLEtBQUssZ0JBQWxCLElBQ0FBLGFBQWEsS0FBSyxtQkFGcEIsRUFHRTtBQUNBLFdBQ0VBLGFBQWEsR0FDYlAsS0FEQSxHQUVBTSxPQUFPLENBQUNMLEdBQUcsQ0FBQ1UsTUFBTCxFQUFhVCxNQUFiLEVBQXFCQyxXQUFyQixFQUFrQ0MsS0FBbEMsRUFBeUNDLElBQXpDLENBSFQ7QUFLRDs7QUFFRCxNQUNFRSxhQUFhLEtBQUssa0JBQWxCLElBQ0FBLGFBQWEsS0FBSyxxQkFGcEIsRUFHRTtBQUNBLFdBQ0VBLGFBQWEsR0FDYlAsS0FEQSxHQUVBTSxPQUFPLENBQUNMLEdBQUcsQ0FBQ1UsTUFBTCxFQUFhVCxNQUFiLEVBQXFCQyxXQUFyQixFQUFrQ0MsS0FBbEMsRUFBeUNDLElBQXpDLENBSFQ7QUFLRDs7QUFFRCxTQUFPSixHQUFHLENBQUNZLG1CQUFKLEVBQVA7QUFDRCxDQTFFRDs7QUE0RUE1QixPQUFPLENBQUNJLFNBQVIsR0FBb0JBLFNBQXBCOztBQUVBLElBQU1ELElBQUksR0FBRyxTQUFQQSxJQUFPLENBQUFhLEdBQUc7QUFBQSxTQUFJQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ2EsUUFBSixLQUFpQmhCLGlCQUE1QjtBQUFBLENBQWhCOztBQUVBYixPQUFPLENBQUNHLElBQVIsR0FBZUEsSUFBZjtBQUNBLElBQU0yQixNQUFNLEdBQUc7QUFDYjFCLEVBQUFBLFNBQVMsRUFBVEEsU0FEYTtBQUViRCxFQUFBQSxJQUFJLEVBQUpBO0FBRmEsQ0FBZjtBQUlBLElBQUk0QixRQUFRLEdBQUdELE1BQWY7QUFDQTlCLE9BQU8sQ0FBQ0UsT0FBUixHQUFrQjZCLFFBQWxCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMudGVzdCA9IGV4cG9ydHMuc2VyaWFsaXplID0gdm9pZCAwO1xuXG52YXIgX2NvbGxlY3Rpb25zID0gcmVxdWlyZSgnLi4vY29sbGVjdGlvbnMnKTtcblxudmFyIGdsb2JhbCA9IChmdW5jdGlvbiAoKSB7XG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZ2xvYmFsVGhpcztcbiAgfSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBnbG9iYWw7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuICB9XG59KSgpO1xuXG52YXIgU3ltYm9sID0gZ2xvYmFsWydqZXN0LXN5bWJvbC1kby1ub3QtdG91Y2gnXSB8fCBnbG9iYWwuU3ltYm9sO1xuY29uc3QgYXN5bW1ldHJpY01hdGNoZXIgPVxuICB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5mb3JcbiAgICA/IFN5bWJvbC5mb3IoJ2plc3QuYXN5bW1ldHJpY01hdGNoZXInKVxuICAgIDogMHgxMzU3YTU7XG5jb25zdCBTUEFDRSA9ICcgJztcblxuY29uc3Qgc2VyaWFsaXplID0gKHZhbCwgY29uZmlnLCBpbmRlbnRhdGlvbiwgZGVwdGgsIHJlZnMsIHByaW50ZXIpID0+IHtcbiAgY29uc3Qgc3RyaW5nZWRWYWx1ZSA9IHZhbC50b1N0cmluZygpO1xuXG4gIGlmIChcbiAgICBzdHJpbmdlZFZhbHVlID09PSAnQXJyYXlDb250YWluaW5nJyB8fFxuICAgIHN0cmluZ2VkVmFsdWUgPT09ICdBcnJheU5vdENvbnRhaW5pbmcnXG4gICkge1xuICAgIGlmICgrK2RlcHRoID4gY29uZmlnLm1heERlcHRoKSB7XG4gICAgICByZXR1cm4gJ1snICsgc3RyaW5nZWRWYWx1ZSArICddJztcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgc3RyaW5nZWRWYWx1ZSArXG4gICAgICBTUEFDRSArXG4gICAgICAnWycgK1xuICAgICAgKDAsIF9jb2xsZWN0aW9ucy5wcmludExpc3RJdGVtcykoXG4gICAgICAgIHZhbC5zYW1wbGUsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgaW5kZW50YXRpb24sXG4gICAgICAgIGRlcHRoLFxuICAgICAgICByZWZzLFxuICAgICAgICBwcmludGVyXG4gICAgICApICtcbiAgICAgICddJ1xuICAgICk7XG4gIH1cblxuICBpZiAoXG4gICAgc3RyaW5nZWRWYWx1ZSA9PT0gJ09iamVjdENvbnRhaW5pbmcnIHx8XG4gICAgc3RyaW5nZWRWYWx1ZSA9PT0gJ09iamVjdE5vdENvbnRhaW5pbmcnXG4gICkge1xuICAgIGlmICgrK2RlcHRoID4gY29uZmlnLm1heERlcHRoKSB7XG4gICAgICByZXR1cm4gJ1snICsgc3RyaW5nZWRWYWx1ZSArICddJztcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgc3RyaW5nZWRWYWx1ZSArXG4gICAgICBTUEFDRSArXG4gICAgICAneycgK1xuICAgICAgKDAsIF9jb2xsZWN0aW9ucy5wcmludE9iamVjdFByb3BlcnRpZXMpKFxuICAgICAgICB2YWwuc2FtcGxlLFxuICAgICAgICBjb25maWcsXG4gICAgICAgIGluZGVudGF0aW9uLFxuICAgICAgICBkZXB0aCxcbiAgICAgICAgcmVmcyxcbiAgICAgICAgcHJpbnRlclxuICAgICAgKSArXG4gICAgICAnfSdcbiAgICApO1xuICB9XG5cbiAgaWYgKFxuICAgIHN0cmluZ2VkVmFsdWUgPT09ICdTdHJpbmdNYXRjaGluZycgfHxcbiAgICBzdHJpbmdlZFZhbHVlID09PSAnU3RyaW5nTm90TWF0Y2hpbmcnXG4gICkge1xuICAgIHJldHVybiAoXG4gICAgICBzdHJpbmdlZFZhbHVlICtcbiAgICAgIFNQQUNFICtcbiAgICAgIHByaW50ZXIodmFsLnNhbXBsZSwgY29uZmlnLCBpbmRlbnRhdGlvbiwgZGVwdGgsIHJlZnMpXG4gICAgKTtcbiAgfVxuXG4gIGlmIChcbiAgICBzdHJpbmdlZFZhbHVlID09PSAnU3RyaW5nQ29udGFpbmluZycgfHxcbiAgICBzdHJpbmdlZFZhbHVlID09PSAnU3RyaW5nTm90Q29udGFpbmluZydcbiAgKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHN0cmluZ2VkVmFsdWUgK1xuICAgICAgU1BBQ0UgK1xuICAgICAgcHJpbnRlcih2YWwuc2FtcGxlLCBjb25maWcsIGluZGVudGF0aW9uLCBkZXB0aCwgcmVmcylcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHZhbC50b0FzeW1tZXRyaWNNYXRjaGVyKCk7XG59O1xuXG5leHBvcnRzLnNlcmlhbGl6ZSA9IHNlcmlhbGl6ZTtcblxuY29uc3QgdGVzdCA9IHZhbCA9PiB2YWwgJiYgdmFsLiQkdHlwZW9mID09PSBhc3ltbWV0cmljTWF0Y2hlcjtcblxuZXhwb3J0cy50ZXN0ID0gdGVzdDtcbmNvbnN0IHBsdWdpbiA9IHtcbiAgc2VyaWFsaXplLFxuICB0ZXN0XG59O1xudmFyIF9kZWZhdWx0ID0gcGx1Z2luO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG4iXX0=