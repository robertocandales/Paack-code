acaebff746cc59a55d66ab5313bdd997
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "act", {
  enumerable: true,
  get: function get() {
    return _act.default;
  }
});
Object.defineProperty(exports, "cleanup", {
  enumerable: true,
  get: function get() {
    return _cleanup.default;
  }
});
Object.defineProperty(exports, "fireEvent", {
  enumerable: true,
  get: function get() {
    return _fireEvent.default;
  }
});
Object.defineProperty(exports, "flushMicrotasksQueue", {
  enumerable: true,
  get: function get() {
    return _flushMicroTasks.default;
  }
});
Object.defineProperty(exports, "render", {
  enumerable: true,
  get: function get() {
    return _render.default;
  }
});
Object.defineProperty(exports, "shallow", {
  enumerable: true,
  get: function get() {
    return _shallow.default;
  }
});
Object.defineProperty(exports, "waitFor", {
  enumerable: true,
  get: function get() {
    return _waitFor.default;
  }
});
Object.defineProperty(exports, "waitForElement", {
  enumerable: true,
  get: function get() {
    return _waitFor.waitForElement;
  }
});
Object.defineProperty(exports, "waitForElementToBeRemoved", {
  enumerable: true,
  get: function get() {
    return _waitForElementToBeRemoved.default;
  }
});
Object.defineProperty(exports, "within", {
  enumerable: true,
  get: function get() {
    return _within.within;
  }
});
Object.defineProperty(exports, "getQueriesForElement", {
  enumerable: true,
  get: function get() {
    return _within.getQueriesForElement;
  }
});
Object.defineProperty(exports, "getDefaultNormalizer", {
  enumerable: true,
  get: function get() {
    return _matches.getDefaultNormalizer;
  }
});

var _act = _interopRequireDefault(require("./act"));

var _cleanup = _interopRequireDefault(require("./cleanup"));

var _fireEvent = _interopRequireDefault(require("./fireEvent"));

var _flushMicroTasks = _interopRequireDefault(require("./flushMicroTasks"));

var _render = _interopRequireDefault(require("./render"));

var _shallow = _interopRequireDefault(require("./shallow"));

var _waitFor = _interopRequireWildcard(require("./waitFor"));

var _waitForElementToBeRemoved = _interopRequireDefault(require("./waitForElementToBeRemoved"));

var _within = require("./within");

var _matches = require("./matches");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,