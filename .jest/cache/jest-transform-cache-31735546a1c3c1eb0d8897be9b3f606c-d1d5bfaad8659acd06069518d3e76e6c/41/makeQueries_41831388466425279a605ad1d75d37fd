f8bd29655d3c9b3abb8fc7f16b354da6
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeQueries = makeQueries;

var _waitFor = _interopRequireDefault(require("../waitFor"));

var _errors = require("./errors");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var deprecatedKeys = ['timeout', 'interval', 'stackTraceError'];

var extractDeprecatedWaitForOptionUsage = function extractDeprecatedWaitForOptionUsage(queryOptions) {
  if (queryOptions) {
    var waitForOptions = {
      timeout: queryOptions.timeout,
      interval: queryOptions.interval,
      stackTraceError: queryOptions.stackTraceError
    };
    deprecatedKeys.forEach(function (key) {
      if (queryOptions[key]) {
        console.warn("Use of option \"" + key + "\" in a findBy* query's second parameter, TextMatchOptions, is deprecated. Please pass this option in the third, WaitForOptions, parameter. \nExample: \n\n  findByText(text, {}, { " + key + ": " + queryOptions[key].toString() + " })");
      }
    });
    return waitForOptions;
  }
};

function makeQueries(queryAllByQuery, getMissingError, getMultipleError) {
  function getAllByQuery(instance) {
    return function getAllFn(args, queryOptions) {
      var results = queryAllByQuery(instance)(args, queryOptions);

      if (results.length === 0) {
        throw new _errors.ErrorWithStack(getMissingError(args), getAllFn);
      }

      return results;
    };
  }

  function queryByQuery(instance) {
    return function singleQueryFn(args, queryOptions) {
      var results = queryAllByQuery(instance)(args, queryOptions);

      if (results.length > 1) {
        throw new _errors.ErrorWithStack(getMultipleError(args), singleQueryFn);
      }

      if (results.length === 0) {
        return null;
      }

      return results[0];
    };
  }

  function getByQuery(instance) {
    return function getFn(args, queryOptions) {
      var results = queryAllByQuery(instance)(args, queryOptions);

      if (results.length > 1) {
        throw new _errors.ErrorWithStack(getMultipleError(args), getFn);
      }

      if (results.length === 0) {
        throw new _errors.ErrorWithStack(getMissingError(args), getFn);
      }

      return results[0];
    };
  }

  function findAllByQuery(instance) {
    return function findAllFn(args, queryOptions) {
      var waitForOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var deprecatedWaitForOptions = extractDeprecatedWaitForOptionUsage(queryOptions);
      return (0, _waitFor.default)(function () {
        return getAllByQuery(instance)(args, queryOptions);
      }, _objectSpread(_objectSpread({}, deprecatedWaitForOptions), waitForOptions));
    };
  }

  function findByQuery(instance) {
    return function findFn(args, queryOptions) {
      var waitForOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var deprecatedWaitForOptions = extractDeprecatedWaitForOptionUsage(queryOptions);
      return (0, _waitFor.default)(function () {
        return getByQuery(instance)(args, queryOptions);
      }, _objectSpread(_objectSpread({}, deprecatedWaitForOptions), waitForOptions));
    };
  }

  return {
    getBy: getByQuery,
    getAllBy: getAllByQuery,
    queryBy: queryByQuery,
    findBy: findByQuery,
    findAllBy: findAllByQuery
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,