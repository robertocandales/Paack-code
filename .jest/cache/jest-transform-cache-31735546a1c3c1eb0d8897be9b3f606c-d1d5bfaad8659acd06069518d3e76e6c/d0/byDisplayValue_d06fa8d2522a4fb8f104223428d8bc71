29622d10168d6316149123414263c660
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryByDisplayValue = exports.queryAllByDisplayValue = exports.getByDisplayValue = exports.getAllByDisplayValue = exports.findByDisplayValue = exports.findAllByDisplayValue = void 0;

var _matches = require("../matches");

var _makeQueries = require("./makeQueries");

var _filterNodeByType = require("./filterNodeByType");

var _errors = require("./errors");

var getTextInputNodeByDisplayValue = function getTextInputNodeByDisplayValue(node, value) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  try {
    var _require = require('react-native'),
        TextInput = _require.TextInput;

    var exact = options.exact,
        normalizer = options.normalizer;
    var nodeValue = node.props.value !== undefined ? node.props.value : node.props.defaultValue;
    return (0, _filterNodeByType.filterNodeByType)(node, TextInput) && (0, _matches.matches)(value, nodeValue, normalizer, exact);
  } catch (error) {
    throw (0, _errors.createLibraryNotSupportedError)(error);
  }
};

var queryAllByDisplayValue = function queryAllByDisplayValue(instance) {
  return function queryAllByDisplayValueFn(displayValue, queryOptions) {
    return instance.findAll(function (node) {
      return getTextInputNodeByDisplayValue(node, displayValue, queryOptions);
    });
  };
};

exports.queryAllByDisplayValue = queryAllByDisplayValue;

var getMultipleError = function getMultipleError(displayValue) {
  return "Found multiple elements with display value: " + String(displayValue) + " ";
};

var getMissingError = function getMissingError(displayValue) {
  return "Unable to find an element with displayValue: " + String(displayValue);
};

var _ref = (0, _makeQueries.makeQueries)(queryAllByDisplayValue, getMissingError, getMultipleError),
    getByDisplayValue = _ref.getBy,
    getAllByDisplayValue = _ref.getAllBy,
    queryByDisplayValue = _ref.queryBy,
    findByDisplayValue = _ref.findBy,
    findAllByDisplayValue = _ref.findAllBy;

exports.findAllByDisplayValue = findAllByDisplayValue;
exports.findByDisplayValue = findByDisplayValue;
exports.queryByDisplayValue = queryByDisplayValue;
exports.getAllByDisplayValue = getAllByDisplayValue;
exports.getByDisplayValue = getByDisplayValue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ5RGlzcGxheVZhbHVlLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicXVlcnlCeURpc3BsYXlWYWx1ZSIsInF1ZXJ5QWxsQnlEaXNwbGF5VmFsdWUiLCJnZXRCeURpc3BsYXlWYWx1ZSIsImdldEFsbEJ5RGlzcGxheVZhbHVlIiwiZmluZEJ5RGlzcGxheVZhbHVlIiwiZmluZEFsbEJ5RGlzcGxheVZhbHVlIiwiX21hdGNoZXMiLCJyZXF1aXJlIiwiX21ha2VRdWVyaWVzIiwiX2ZpbHRlck5vZGVCeVR5cGUiLCJfZXJyb3JzIiwiZ2V0VGV4dElucHV0Tm9kZUJ5RGlzcGxheVZhbHVlIiwibm9kZSIsIm9wdGlvbnMiLCJUZXh0SW5wdXQiLCJleGFjdCIsIm5vcm1hbGl6ZXIiLCJub2RlVmFsdWUiLCJwcm9wcyIsInVuZGVmaW5lZCIsImRlZmF1bHRWYWx1ZSIsImZpbHRlck5vZGVCeVR5cGUiLCJtYXRjaGVzIiwiZXJyb3IiLCJjcmVhdGVMaWJyYXJ5Tm90U3VwcG9ydGVkRXJyb3IiLCJpbnN0YW5jZSIsInF1ZXJ5QWxsQnlEaXNwbGF5VmFsdWVGbiIsImRpc3BsYXlWYWx1ZSIsInF1ZXJ5T3B0aW9ucyIsImZpbmRBbGwiLCJnZXRNdWx0aXBsZUVycm9yIiwiU3RyaW5nIiwiZ2V0TWlzc2luZ0Vycm9yIiwibWFrZVF1ZXJpZXMiLCJnZXRCeSIsImdldEFsbEJ5IiwicXVlcnlCeSIsImZpbmRCeSIsImZpbmRBbGxCeSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLG1CQUFSLEdBQThCRixPQUFPLENBQUNHLHNCQUFSLEdBQWlDSCxPQUFPLENBQUNJLGlCQUFSLEdBQTRCSixPQUFPLENBQUNLLG9CQUFSLEdBQStCTCxPQUFPLENBQUNNLGtCQUFSLEdBQTZCTixPQUFPLENBQUNPLHFCQUFSLEdBQWdDLEtBQUssQ0FBNUw7O0FBRUEsSUFBSUMsUUFBUSxHQUFHQyxPQUFPLGNBQXRCOztBQUVBLElBQUlDLFlBQVksR0FBR0QsT0FBTyxpQkFBMUI7O0FBRUEsSUFBSUUsaUJBQWlCLEdBQUdGLE9BQU8sc0JBQS9COztBQUVBLElBQUlHLE9BQU8sR0FBR0gsT0FBTyxZQUFyQjs7QUFFQSxJQUFNSSw4QkFBOEIsR0FBRyxTQUFqQ0EsOEJBQWlDLENBQUNDLElBQUQsRUFBT2IsS0FBUCxFQUErQjtBQUFBLE1BQWpCYyxPQUFpQix1RUFBUCxFQUFPOztBQUNwRSxNQUFJO0FBQ0YsbUJBRUlOLE9BQU8sQ0FBQyxjQUFELENBRlg7QUFBQSxRQUNFTyxTQURGLFlBQ0VBLFNBREY7O0FBSUEsUUFDRUMsS0FERixHQUdJRixPQUhKLENBQ0VFLEtBREY7QUFBQSxRQUVFQyxVQUZGLEdBR0lILE9BSEosQ0FFRUcsVUFGRjtBQUlBLFFBQU1DLFNBQVMsR0FBR0wsSUFBSSxDQUFDTSxLQUFMLENBQVduQixLQUFYLEtBQXFCb0IsU0FBckIsR0FBaUNQLElBQUksQ0FBQ00sS0FBTCxDQUFXbkIsS0FBNUMsR0FBb0RhLElBQUksQ0FBQ00sS0FBTCxDQUFXRSxZQUFqRjtBQUNBLFdBQU8sQ0FBQyxHQUFHWCxpQkFBaUIsQ0FBQ1ksZ0JBQXRCLEVBQXdDVCxJQUF4QyxFQUE4Q0UsU0FBOUMsS0FBNEQsQ0FBQyxHQUFHUixRQUFRLENBQUNnQixPQUFiLEVBQXNCdkIsS0FBdEIsRUFBNkJrQixTQUE3QixFQUF3Q0QsVUFBeEMsRUFBb0RELEtBQXBELENBQW5FO0FBQ0QsR0FYRCxDQVdFLE9BQU9RLEtBQVAsRUFBYztBQUNkLFVBQU0sQ0FBQyxHQUFHYixPQUFPLENBQUNjLDhCQUFaLEVBQTRDRCxLQUE1QyxDQUFOO0FBQ0Q7QUFDRixDQWZEOztBQWlCQSxJQUFNdEIsc0JBQXNCLEdBQUcsU0FBekJBLHNCQUF5QixDQUFBd0IsUUFBUTtBQUFBLFNBQUksU0FBU0Msd0JBQVQsQ0FBa0NDLFlBQWxDLEVBQWdEQyxZQUFoRCxFQUE4RDtBQUN2RyxXQUFPSCxRQUFRLENBQUNJLE9BQVQsQ0FBaUIsVUFBQWpCLElBQUk7QUFBQSxhQUFJRCw4QkFBOEIsQ0FBQ0MsSUFBRCxFQUFPZSxZQUFQLEVBQXFCQyxZQUFyQixDQUFsQztBQUFBLEtBQXJCLENBQVA7QUFDRCxHQUZzQztBQUFBLENBQXZDOztBQUlBOUIsT0FBTyxDQUFDRyxzQkFBUixHQUFpQ0Esc0JBQWpDOztBQUVBLElBQU02QixnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQW1CLENBQUFILFlBQVk7QUFBQSwwREFBbURJLE1BQU0sQ0FBQ0osWUFBRCxDQUF6RDtBQUFBLENBQXJDOztBQUVBLElBQU1LLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsQ0FBQUwsWUFBWTtBQUFBLDJEQUFvREksTUFBTSxDQUFDSixZQUFELENBQTFEO0FBQUEsQ0FBcEM7O0FBRUEsV0FNSSxDQUFDLEdBQUduQixZQUFZLENBQUN5QixXQUFqQixFQUE4QmhDLHNCQUE5QixFQUFzRCtCLGVBQXRELEVBQXVFRixnQkFBdkUsQ0FOSjtBQUFBLElBQ1M1QixpQkFEVCxRQUNFZ0MsS0FERjtBQUFBLElBRVkvQixvQkFGWixRQUVFZ0MsUUFGRjtBQUFBLElBR1duQyxtQkFIWCxRQUdFb0MsT0FIRjtBQUFBLElBSVVoQyxrQkFKVixRQUlFaUMsTUFKRjtBQUFBLElBS2FoQyxxQkFMYixRQUtFaUMsU0FMRjs7QUFPQXhDLE9BQU8sQ0FBQ08scUJBQVIsR0FBZ0NBLHFCQUFoQztBQUNBUCxPQUFPLENBQUNNLGtCQUFSLEdBQTZCQSxrQkFBN0I7QUFDQU4sT0FBTyxDQUFDRSxtQkFBUixHQUE4QkEsbUJBQTlCO0FBQ0FGLE9BQU8sQ0FBQ0ssb0JBQVIsR0FBK0JBLG9CQUEvQjtBQUNBTCxPQUFPLENBQUNJLGlCQUFSLEdBQTRCQSxpQkFBNUIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucXVlcnlCeURpc3BsYXlWYWx1ZSA9IGV4cG9ydHMucXVlcnlBbGxCeURpc3BsYXlWYWx1ZSA9IGV4cG9ydHMuZ2V0QnlEaXNwbGF5VmFsdWUgPSBleHBvcnRzLmdldEFsbEJ5RGlzcGxheVZhbHVlID0gZXhwb3J0cy5maW5kQnlEaXNwbGF5VmFsdWUgPSBleHBvcnRzLmZpbmRBbGxCeURpc3BsYXlWYWx1ZSA9IHZvaWQgMDtcblxudmFyIF9tYXRjaGVzID0gcmVxdWlyZShcIi4uL21hdGNoZXNcIik7XG5cbnZhciBfbWFrZVF1ZXJpZXMgPSByZXF1aXJlKFwiLi9tYWtlUXVlcmllc1wiKTtcblxudmFyIF9maWx0ZXJOb2RlQnlUeXBlID0gcmVxdWlyZShcIi4vZmlsdGVyTm9kZUJ5VHlwZVwiKTtcblxudmFyIF9lcnJvcnMgPSByZXF1aXJlKFwiLi9lcnJvcnNcIik7XG5cbmNvbnN0IGdldFRleHRJbnB1dE5vZGVCeURpc3BsYXlWYWx1ZSA9IChub2RlLCB2YWx1ZSwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3Qge1xuICAgICAgVGV4dElucHV0XG4gICAgfSA9IHJlcXVpcmUoJ3JlYWN0LW5hdGl2ZScpO1xuXG4gICAgY29uc3Qge1xuICAgICAgZXhhY3QsXG4gICAgICBub3JtYWxpemVyXG4gICAgfSA9IG9wdGlvbnM7XG4gICAgY29uc3Qgbm9kZVZhbHVlID0gbm9kZS5wcm9wcy52YWx1ZSAhPT0gdW5kZWZpbmVkID8gbm9kZS5wcm9wcy52YWx1ZSA6IG5vZGUucHJvcHMuZGVmYXVsdFZhbHVlO1xuICAgIHJldHVybiAoMCwgX2ZpbHRlck5vZGVCeVR5cGUuZmlsdGVyTm9kZUJ5VHlwZSkobm9kZSwgVGV4dElucHV0KSAmJiAoMCwgX21hdGNoZXMubWF0Y2hlcykodmFsdWUsIG5vZGVWYWx1ZSwgbm9ybWFsaXplciwgZXhhY3QpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHRocm93ICgwLCBfZXJyb3JzLmNyZWF0ZUxpYnJhcnlOb3RTdXBwb3J0ZWRFcnJvcikoZXJyb3IpO1xuICB9XG59O1xuXG5jb25zdCBxdWVyeUFsbEJ5RGlzcGxheVZhbHVlID0gaW5zdGFuY2UgPT4gZnVuY3Rpb24gcXVlcnlBbGxCeURpc3BsYXlWYWx1ZUZuKGRpc3BsYXlWYWx1ZSwgcXVlcnlPcHRpb25zKSB7XG4gIHJldHVybiBpbnN0YW5jZS5maW5kQWxsKG5vZGUgPT4gZ2V0VGV4dElucHV0Tm9kZUJ5RGlzcGxheVZhbHVlKG5vZGUsIGRpc3BsYXlWYWx1ZSwgcXVlcnlPcHRpb25zKSk7XG59O1xuXG5leHBvcnRzLnF1ZXJ5QWxsQnlEaXNwbGF5VmFsdWUgPSBxdWVyeUFsbEJ5RGlzcGxheVZhbHVlO1xuXG5jb25zdCBnZXRNdWx0aXBsZUVycm9yID0gZGlzcGxheVZhbHVlID0+IGBGb3VuZCBtdWx0aXBsZSBlbGVtZW50cyB3aXRoIGRpc3BsYXkgdmFsdWU6ICR7U3RyaW5nKGRpc3BsYXlWYWx1ZSl9IGA7XG5cbmNvbnN0IGdldE1pc3NpbmdFcnJvciA9IGRpc3BsYXlWYWx1ZSA9PiBgVW5hYmxlIHRvIGZpbmQgYW4gZWxlbWVudCB3aXRoIGRpc3BsYXlWYWx1ZTogJHtTdHJpbmcoZGlzcGxheVZhbHVlKX1gO1xuXG5jb25zdCB7XG4gIGdldEJ5OiBnZXRCeURpc3BsYXlWYWx1ZSxcbiAgZ2V0QWxsQnk6IGdldEFsbEJ5RGlzcGxheVZhbHVlLFxuICBxdWVyeUJ5OiBxdWVyeUJ5RGlzcGxheVZhbHVlLFxuICBmaW5kQnk6IGZpbmRCeURpc3BsYXlWYWx1ZSxcbiAgZmluZEFsbEJ5OiBmaW5kQWxsQnlEaXNwbGF5VmFsdWVcbn0gPSAoMCwgX21ha2VRdWVyaWVzLm1ha2VRdWVyaWVzKShxdWVyeUFsbEJ5RGlzcGxheVZhbHVlLCBnZXRNaXNzaW5nRXJyb3IsIGdldE11bHRpcGxlRXJyb3IpO1xuZXhwb3J0cy5maW5kQWxsQnlEaXNwbGF5VmFsdWUgPSBmaW5kQWxsQnlEaXNwbGF5VmFsdWU7XG5leHBvcnRzLmZpbmRCeURpc3BsYXlWYWx1ZSA9IGZpbmRCeURpc3BsYXlWYWx1ZTtcbmV4cG9ydHMucXVlcnlCeURpc3BsYXlWYWx1ZSA9IHF1ZXJ5QnlEaXNwbGF5VmFsdWU7XG5leHBvcnRzLmdldEFsbEJ5RGlzcGxheVZhbHVlID0gZ2V0QWxsQnlEaXNwbGF5VmFsdWU7XG5leHBvcnRzLmdldEJ5RGlzcGxheVZhbHVlID0gZ2V0QnlEaXNwbGF5VmFsdWU7Il19