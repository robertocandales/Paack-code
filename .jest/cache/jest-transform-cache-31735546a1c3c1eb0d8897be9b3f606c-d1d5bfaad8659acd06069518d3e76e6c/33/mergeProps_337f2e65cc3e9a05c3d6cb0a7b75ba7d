b36b54c43aca7f74f6a408bb1b0b60eb
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];

exports.__esModule = true;
exports["default"] = void 0;
exports.defaultMergeProps = defaultMergeProps;
exports.whenMergePropsIsFunction = whenMergePropsIsFunction;
exports.whenMergePropsIsOmitted = whenMergePropsIsOmitted;
exports.wrapMergePropsFunc = wrapMergePropsFunc;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _verifyPlainObject = _interopRequireDefault(require("../utils/verifyPlainObject"));

function defaultMergeProps(stateProps, dispatchProps, ownProps) {
  return (0, _extends2["default"])({}, ownProps, stateProps, dispatchProps);
}

function wrapMergePropsFunc(mergeProps) {
  return function initMergePropsProxy(dispatch, _ref) {
    var displayName = _ref.displayName,
        pure = _ref.pure,
        areMergedPropsEqual = _ref.areMergedPropsEqual;
    var hasRunOnce = false;
    var mergedProps;
    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);

      if (hasRunOnce) {
        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
      } else {
        hasRunOnce = true;
        mergedProps = nextMergedProps;
        if (process.env.NODE_ENV !== 'production') (0, _verifyPlainObject["default"])(mergedProps, displayName, 'mergeProps');
      }

      return mergedProps;
    };
  };
}

function whenMergePropsIsFunction(mergeProps) {
  return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;
}

function whenMergePropsIsOmitted(mergeProps) {
  return !mergeProps ? function () {
    return defaultMergeProps;
  } : undefined;
}

var _default = [whenMergePropsIsFunction, whenMergePropsIsOmitted];
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lcmdlUHJvcHMuanMiXSwibmFtZXMiOlsiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHRNZXJnZVByb3BzIiwid2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uIiwid2hlbk1lcmdlUHJvcHNJc09taXR0ZWQiLCJ3cmFwTWVyZ2VQcm9wc0Z1bmMiLCJfZXh0ZW5kczIiLCJfdmVyaWZ5UGxhaW5PYmplY3QiLCJzdGF0ZVByb3BzIiwiZGlzcGF0Y2hQcm9wcyIsIm93blByb3BzIiwibWVyZ2VQcm9wcyIsImluaXRNZXJnZVByb3BzUHJveHkiLCJkaXNwYXRjaCIsIl9yZWYiLCJkaXNwbGF5TmFtZSIsInB1cmUiLCJhcmVNZXJnZWRQcm9wc0VxdWFsIiwiaGFzUnVuT25jZSIsIm1lcmdlZFByb3BzIiwibWVyZ2VQcm9wc1Byb3h5IiwibmV4dE1lcmdlZFByb3BzIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwidW5kZWZpbmVkIiwiX2RlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLHNCQUFzQixHQUFHQyxPQUFPLENBQUMsOENBQUQsQ0FBUCxDQUF3RCxTQUF4RCxDQUE3Qjs7QUFFQUMsT0FBTyxDQUFDQyxVQUFSLEdBQXFCLElBQXJCO0FBQ0FELE9BQU8sQ0FBQyxTQUFELENBQVAsR0FBcUIsS0FBSyxDQUExQjtBQUNBQSxPQUFPLENBQUNFLGlCQUFSLEdBQTRCQSxpQkFBNUI7QUFDQUYsT0FBTyxDQUFDRyx3QkFBUixHQUFtQ0Esd0JBQW5DO0FBQ0FILE9BQU8sQ0FBQ0ksdUJBQVIsR0FBa0NBLHVCQUFsQztBQUNBSixPQUFPLENBQUNLLGtCQUFSLEdBQTZCQSxrQkFBN0I7O0FBRUEsSUFBSUMsU0FBUyxHQUFHUixzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLGdDQUFELENBQVIsQ0FBdEM7O0FBRUEsSUFBSVEsa0JBQWtCLEdBQUdULHNCQUFzQixDQUFDQyxPQUFPLDhCQUFSLENBQS9DOztBQUVBLFNBQVNHLGlCQUFULENBQTJCTSxVQUEzQixFQUF1Q0MsYUFBdkMsRUFBc0RDLFFBQXRELEVBQWdFO0FBQzlELFNBQU8sQ0FBQyxHQUFHSixTQUFTLENBQUMsU0FBRCxDQUFiLEVBQTBCLEVBQTFCLEVBQThCSSxRQUE5QixFQUF3Q0YsVUFBeEMsRUFBb0RDLGFBQXBELENBQVA7QUFDRDs7QUFFRCxTQUFTSixrQkFBVCxDQUE0Qk0sVUFBNUIsRUFBd0M7QUFDdEMsU0FBTyxTQUFTQyxtQkFBVCxDQUE2QkMsUUFBN0IsRUFBdUNDLElBQXZDLEVBQTZDO0FBQ2xELFFBQUlDLFdBQVcsR0FBR0QsSUFBSSxDQUFDQyxXQUF2QjtBQUFBLFFBQ0lDLElBQUksR0FBR0YsSUFBSSxDQUFDRSxJQURoQjtBQUFBLFFBRUlDLG1CQUFtQixHQUFHSCxJQUFJLENBQUNHLG1CQUYvQjtBQUdBLFFBQUlDLFVBQVUsR0FBRyxLQUFqQjtBQUNBLFFBQUlDLFdBQUo7QUFDQSxXQUFPLFNBQVNDLGVBQVQsQ0FBeUJaLFVBQXpCLEVBQXFDQyxhQUFyQyxFQUFvREMsUUFBcEQsRUFBOEQ7QUFDbkUsVUFBSVcsZUFBZSxHQUFHVixVQUFVLENBQUNILFVBQUQsRUFBYUMsYUFBYixFQUE0QkMsUUFBNUIsQ0FBaEM7O0FBRUEsVUFBSVEsVUFBSixFQUFnQjtBQUNkLFlBQUksQ0FBQ0YsSUFBRCxJQUFTLENBQUNDLG1CQUFtQixDQUFDSSxlQUFELEVBQWtCRixXQUFsQixDQUFqQyxFQUFpRUEsV0FBVyxHQUFHRSxlQUFkO0FBQ2xFLE9BRkQsTUFFTztBQUNMSCxRQUFBQSxVQUFVLEdBQUcsSUFBYjtBQUNBQyxRQUFBQSxXQUFXLEdBQUdFLGVBQWQ7QUFDQSxZQUFJQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsUUFBWixLQUF5QixZQUE3QixFQUEyQyxDQUFDLEdBQUdqQixrQkFBa0IsQ0FBQyxTQUFELENBQXRCLEVBQW1DWSxXQUFuQyxFQUFnREosV0FBaEQsRUFBNkQsWUFBN0Q7QUFDNUM7O0FBRUQsYUFBT0ksV0FBUDtBQUNELEtBWkQ7QUFhRCxHQW5CRDtBQW9CRDs7QUFFRCxTQUFTaEIsd0JBQVQsQ0FBa0NRLFVBQWxDLEVBQThDO0FBQzVDLFNBQU8sT0FBT0EsVUFBUCxLQUFzQixVQUF0QixHQUFtQ04sa0JBQWtCLENBQUNNLFVBQUQsQ0FBckQsR0FBb0VjLFNBQTNFO0FBQ0Q7O0FBRUQsU0FBU3JCLHVCQUFULENBQWlDTyxVQUFqQyxFQUE2QztBQUMzQyxTQUFPLENBQUNBLFVBQUQsR0FBYyxZQUFZO0FBQy9CLFdBQU9ULGlCQUFQO0FBQ0QsR0FGTSxHQUVIdUIsU0FGSjtBQUdEOztBQUVELElBQUlDLFFBQVEsR0FBRyxDQUFDdkIsd0JBQUQsRUFBMkJDLHVCQUEzQixDQUFmO0FBQ0FKLE9BQU8sQ0FBQyxTQUFELENBQVAsR0FBcUIwQixRQUFyQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKVtcImRlZmF1bHRcIl07XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcbmV4cG9ydHMuZGVmYXVsdE1lcmdlUHJvcHMgPSBkZWZhdWx0TWVyZ2VQcm9wcztcbmV4cG9ydHMud2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uID0gd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uO1xuZXhwb3J0cy53aGVuTWVyZ2VQcm9wc0lzT21pdHRlZCA9IHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkO1xuZXhwb3J0cy53cmFwTWVyZ2VQcm9wc0Z1bmMgPSB3cmFwTWVyZ2VQcm9wc0Z1bmM7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX3ZlcmlmeVBsYWluT2JqZWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3RcIikpO1xuXG5mdW5jdGlvbiBkZWZhdWx0TWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICByZXR1cm4gKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCBvd25Qcm9wcywgc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcyk7XG59XG5cbmZ1bmN0aW9uIHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0TWVyZ2VQcm9wc1Byb3h5KGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZSxcbiAgICAgICAgcHVyZSA9IF9yZWYucHVyZSxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYuYXJlTWVyZ2VkUHJvcHNFcXVhbDtcbiAgICB2YXIgaGFzUnVuT25jZSA9IGZhbHNlO1xuICAgIHZhciBtZXJnZWRQcm9wcztcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VQcm9wc1Byb3h5KHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gICAgICB2YXIgbmV4dE1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmIChoYXNSdW5PbmNlKSB7XG4gICAgICAgIGlmICghcHVyZSB8fCAhYXJlTWVyZ2VkUHJvcHNFcXVhbChuZXh0TWVyZ2VkUHJvcHMsIG1lcmdlZFByb3BzKSkgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYXNSdW5PbmNlID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAoMCwgX3ZlcmlmeVBsYWluT2JqZWN0W1wiZGVmYXVsdFwiXSkobWVyZ2VkUHJvcHMsIGRpc3BsYXlOYW1lLCAnbWVyZ2VQcm9wcycpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gICAgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtZXJnZVByb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIDogdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZChtZXJnZVByb3BzKSB7XG4gIHJldHVybiAhbWVyZ2VQcm9wcyA/IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1lcmdlUHJvcHM7XG4gIH0gOiB1bmRlZmluZWQ7XG59XG5cbnZhciBfZGVmYXVsdCA9IFt3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24sIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkXTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7Il19